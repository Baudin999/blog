<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://baudin999.github.io/blog//blog/feed.xml" rel="self" type="application/atom+xml" /><link href="https://baudin999.github.io/blog//blog/" rel="alternate" type="text/html" hreflang="en" /><updated>2023-08-24T17:27:48+02:00</updated><id>https://baudin999.github.io/blog//blog/feed.xml</id><title type="html">Carlos’s Blog</title><subtitle>I have been consuming the combined knowledge of my hero&apos;s for years. Now, after over 20 years as a software developer, I am ready to give back to everyone. I  hope you enjoy!</subtitle><author><name>Carlos Kelkboom</name><email>baudin-sky@pm.me</email></author><entry><title type="html">The failures of modern agile frameworks</title><link href="https://baudin999.github.io/blog//blog/2023/08/24/scrum-is-bad.html" rel="alternate" type="text/html" title="The failures of modern agile frameworks" /><published>2023-08-24T00:00:00+02:00</published><updated>2023-08-24T00:00:00+02:00</updated><id>https://baudin999.github.io/blog//blog/2023/08/24/scrum-is-bad</id><content type="html" xml:base="https://baudin999.github.io/blog//blog/2023/08/24/scrum-is-bad.html"><![CDATA[<blockquote>
  <p>I do not pander, I do not soften words and I do not expect everyone to agree with this article.
  I don’t even think everyone will <em>understand</em> this article. With that said, I want to preface
  my writing with a general explenation. I love software and I love quality. This article is more
  a love letter to engineering than a critique on Scrum. If you <em>do</em> want to read this as a critique,
  I will not hold it against you…</p>
</blockquote>

<p>Ah, Scrum! A topic that, for many, begins as an exhilarating breath of fresh air but can often leave a 
bittersweet aftertaste. Reminiscent of how inheritance in object-oriented programming, with its initial 
allure of structure and reusability, often masks complexities and muddles readability, Scrum, too, has 
its own subtle deceptions. As inheritance can compromise code clarity, Scrum sometimes runs the risk of 
overshadowing a fundamental truth: at its core, a project’s success is anchored by competent engineers, 
not just a framework.</p>

<p>let me give you an analogy: <em>Imagine a carpenter. This carpenter is really bad at his work. But, this 
carpenter sees a book on Scrum and he loves it! He makes small iterations, he hires someone to plan 
his work, he even hires someone who helps him face his bad products. All might seem good, until you 
look at the products themselves. His skill had not increased, his products are still bad.</em></p>

<p>I know, after a rant about <a href="https://baudin999.github.io/blog/2023/08/24/inheritance-is-bad.html">inheritance</a>, I 
now have the gall to rant about <a href="https://www.agilealliance.org/glossary/scrum/">Scrum</a>. I promise you
that the only thing I am interrested in, is simplicity. I like it when: <em>Good engineers are left to do
what they are good at!</em></p>

<p>For me Scrum is the antithesis of that. Scrum prefers a process over the result and Scrum pretends to 
fit onto and into any software organisation*. Transitioning from the early 90s, when Jeff Sutherland and 
Ken Schwaber were influenced by Takeuchi and Nonaka’s analogy of high-performing teams to a game of 
rugby, Scrum emerged as an answer to the limitations of traditional project management. Its structure 
promised agility, adaptability, and results. And for a time, it seemed to deliver just that.</p>

<p>Then commercial success kicked in, especially in the early 2000s. Courses, certifications, and consulting 
services sprouted up. Everyone wanted a piece of the Agile pie, of which Scrum was a major slice. Today? 
It’s a multi-billion-dollar industry. And because of this, just like with most AAA games, greed overtakes
the lofty goals of what Agile could have been.</p>

<p>This article is about what is wrong with our modern approach to software development, it is a critique
on Scrum and it’s larger brother SAFe. It tells the story of why I have the practices, from the Scrum
boards offered by Atlassian to the need to have a PO and Scrum Master in every team. I will break down
what is needed for a successful business and I will try to setup a simple framework which, in my humble
opinion, is much better than Scrum.</p>

<p><em>* If you feel offended by this remark, I invite you to plow thought the literature. There is not a
single remark on the impact of a good engineer on the product. It is all about process. If you still 
do not believe me, read the quotes the the next chapter.</em></p>

<h2 id="what-is-scrum">What is Scrum?</h2>

<p>Let’s give a general definition. I do not want to invent these definitions myself, so I will give four
definitions.</p>

<h3 id="wikipedia">Wikipedia</h3>

<p>Scrum is an agile project management system commonly used in software development and other industries.</p>

<p>Scrum prescribes for teams to break work into goals to be completed within time-boxed iterations, called sprints. Each sprint is no longer than one month and commonly lasts two weeks. The scrum team assesses progress in time-boxed, stand-up meetings of up to 15 minutes, called daily scrums. At the end of the sprint, the team holds two further meetings: one sprint review to demonstrate the work for stakeholders and solicit feedback, and one internal sprint retrospective.</p>

<p>Scrum’s approach to product development involves bringing decision-making authority to an operational level. Unlike a sequential approach to product development, scrum is an iterative and incremental framework for product development. Scrum allows for continuous feedback and flexibility, requiring teams to self-organize by encouraging physical co-location or close online collaboration, and mandating frequent communication among all team members. The flexible and semi-unplanned approach of scrum is based in part on the notion of requirements volatility, that stakeholders will change their requirements as the project evolves.</p>

<p>…</p>

<p>A scrum team is organized into at least three categories of individuals: the product owner, developers, and the scrum master. The product owner liaises with stakeholders to communicate tasks and expectations with developers. Developers in a scrum team are intended to be organizing work by themselves, with the facilitation of a scrum master. Scrum teams, ideally, should abide by the five values of scrum: commitment, courage, focus, openness, and respect.</p>

<p><a href="https://en.wikipedia.org/wiki/Scrum_(software_development)">1 wikipedia</a></p>

<h3 id="the-agile-alliance">The agile alliance:</h3>

<p><b>What is Scrum?</b>
Scrum is a process framework used to manage product development and other knowledge work. Scrum is empirical in that it provides a means for teams to establish a hypothesis of how they think something works, try it out, reflect on the experience, and make the appropriate adjustments. That is, when the framework is used properly. Scrum is structured in a way that allows teams to incorporate practices from other frameworks where they make sense for the team’s context.</p>

<p><b>When is Scrum Applicable?</b>
Scrum is best suited in the case where a cross-functional team is working in a product development setting where there is a nontrivial amount of work that lends itself to being split into more than one 2 – 4 week iteration.</p>

<p><a href="https://www.agilealliance.org/glossary/scrum/">2 agile alliance</a></p>

<h3 id="scrumguidesorg">scrumguides.org</h3>

<p>Scrum is a lightweight framework that helps people, teams and organizations generate value through adaptive solutions for complex problems.</p>

<p>In a nutshell, Scrum requires a Scrum Master to foster an environment where:</p>

<ol>
  <li>Product Owner orders the work for a complex problem into a Product Backlog.</li>
  <li>The Scrum Team turns a selection of the work into an Increment of value during a Sprint.</li>
  <li>The Scrum Team and its stakeholders inspect the results and adjust for the next Sprint.</li>
  <li>Repeat</li>
</ol>

<p>Scrum is simple. Try it as is and determine if its philosophy, theory, and structure help to achieve goals and create value. The Scrum framework is purposefully incomplete, only defining the parts required to implement Scrum theory. Scrum is built upon by the collective intelligence of the people using it. Rather than provide people with detailed instructions, the rules of Scrum guide their relationships and interactions.</p>

<p>Various processes, techniques and methods can be employed within the framework. Scrum wraps around existing practices or renders them unnecessary. Scrum makes visible the relative efficacy of current management, environment, and work techniques, so that improvements can be made.</p>

<p><a href="https://scrumguides.org/scrum-guide.html">3 scrumguides.org</a></p>

<h3 id="chat-gpt">Chat GPT</h3>

<p>Scrum is an iterative and incremental Agile framework primarily used for product development. It promotes collaboration, adaptability, and continuous improvement through structured cycles known as “sprints,” typically lasting 2-4 weeks. Central to Scrum are self-organizing teams comprised of a Product Owner, Scrum Master, and Development Team members. Together, they work on a prioritized list called the Product Backlog, delivering potentially shippable increments at the end of each sprint. Through regular ceremonies like Daily Stand-ups, Sprint Planning, Sprint Review, and Sprint Retrospective, Scrum ensures transparency, inspection, and adaptation.</p>

<h2 id="what-rubs-me-the-wrong-way">What rubs me the wrong way?</h2>
<p>There are a few things which tick me off when I read these definitions. I read things like:</p>

<ul>
  <li>Scrum is simple</li>
  <li>Values: commitment, courage, focus, openness, and respect</li>
  <li>Self-organizing teams comprised of a Product Owner, Scrum Master, and Development Team members</li>
  <li>It promotes collaboration, adaptability, and continuous improvement</li>
</ul>

<p>These are just a few lines picked from the definitions. And what do I miss?</p>

<ul>
  <li>Great engineers and engineering</li>
  <li>Trust the people working for/with you</li>
  <li>Simplicity over complexity</li>
</ul>

<p>A great piece of software makes the customer and the developer happy. If I read these scrum articles
they almost have you believe that a process can compensate for everything. But it cannot. A bad dev
will ruin your project and no amount of process can save you. Just like the oposite is true, a good 
dev can be ruined by a process. For me, scrum is the embodyment of this philosophy.</p>

<p>My philosophy is simple, it can be summed up in a single sentence:</p>

<blockquote>
  <p>Hire great engineers you can trust and give them the freedom to make mistakes.</p>
</blockquote>

<h3 id="the-commercialization-of-scrum-and-its-target-audience">The Commercialization of Scrum and Its Target Audience</h3>

<p>Over the past two decades, there’s been an explosion in the commercial offerings around Scrum: 
certifications, training sessions, coaching, tools, and more. This burgeoning industry,
inevitably shapes how Scrum is presented and to whom. Martin Fowler even calls this the: <em>“Agile Industrial Complex”</em> [3]</p>

<p>One can’t help but notice that much of the Scrum narrative, as peddled by the industry, seems 
tailored to suit non-technical stakeholders.[1] The focus on process, ceremonies, roles, and the 
predictability they promise appeals to managers, executives, and other decision-makers who may 
not be deeply entrenched in the nuances of software engineering.</p>

<p>Why this shift in focus? I can only speculate, but I think it is because it’s the business side 
of organizations that often controls the purse strings. 
For a training company or Scrum consultant, it’s far more lucrative to sell 
a course or service to an entire executive team or management layer than to a handful of 
developers. And when you’re selling to this audience, emphasizing easily digestible processes, 
punctuated with amenable images[2], the semblance of control, and the promise of predictable 
outcomes might be more attractive than delving into the intricacies of software quality or 
engineering best practices.</p>

<p>This commercial motive doesn’t necessarily mean that Scrum itself is flawed. But it does suggest 
that the way Scrum is often presented and packaged for consumption might be skewing priorities. 
Instead of emphasizing the critical importance of skilled engineers, technical excellence, and 
product quality, the narrative leans heavily on processes and roles. The result? Organizations 
might find themselves in a sticky situation when they have spend thousands if not millions of
dollars, only to find that the root of their problems were never the process itself.</p>

<p><em>[1] As can be seen from the quotes off of the websites. There is not a single sentence or 
remark towards quality or skill.</em>
[2]</p>

<p><img src="/blog/assets/img/Scrum_Agile_events.png" alt="scrum agile events" /></p>

<p>If you are still not convinced, please watch these videos by Dave Thomas and Martin Fowler, co-creators of the Agile Manifesto:</p>

<iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/a-BOSpxYJ9M?si=weBkzv0hSwdyY0Yz" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen=""></iframe>

<p>[3] Or Martin Fowler:</p>

<iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/G_y2pNj0zZg?si=AM8xeorNd5PbXfCM" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen=""></iframe>

<h2 id="can-scrum-work-for-you">Can Scrum work for you?</h2>
<p>The answer is, as always, “it depends”. But it does not depend on anything you might hear advocates
of scrum tell you. It depends on how senior the developers you have in your organisation are. If they
know what they are doing and they take the parts of the process which add benefit to their workflow 
and increase their effectiveness through that adoption, the answer is a resounding yes! But that has 
nothing to do with Scrum and everything to do with the quality of the engineering.</p>

<blockquote>
  <p>A process should only make things which are good, better. A process can never be used to make
  something which fails, succeed.</p>
</blockquote>

<p>If you are working in a larger organisation and are working with scrum and you find the rituals and
processes comforting, you might think that I am looking at this in a biassed way. I am not. I am 
looking at this fromt he perspective of the software. In the definitions it is stated that Scrum 
helps an organisation focus on the product. If that is so, they must mean Scrum as a product, because
nothing in their defintion states how to get to a good software product. They say nothing about the
qualities of the engineers. They say nothing about the scope of a project or the trust the stakeholders
need to let a team “code in peace”. Nothing in their description is condusive to a well coded end-product
which will stand the test of time, can be extended when needed and does not cover more features
than needed.</p>

<h2 id="what-is-the-solution">What is the solution?</h2>
<p>I believe, complexity is the only enemy in a large project. Complexity can be found on any level and
is a literal problem for every person envolved. For example:</p>

<ul>
  <li>If you have multiple teams, management is facing complexity</li>
  <li>If you create an over-engineerd microservice architecture, your are running against complexity</li>
  <li>If you try to predict when the project will be done, you will face it’s complexity</li>
</ul>

<p><em>Complexity</em> is the main problem. <em>That</em> is why we need to break problems into smaller chunks. <em>That</em> is why
sprints are sometimes a good idea. Customers do not know what they want before you start working with
the software. They think they do, but they don’t. That is why you show them the product every week, that is 
how they see and feel what they asked for and can change what they had wrong.</p>

<p>When software becomes complex, the delivery slows down. It sometimes grinds to a halt. What do companies do?
They throw manpower against that problem. But what should they do? Reduce the teams to the minimal number 
of people to fix the bottle-necks in the delivery. Do not be afraid to re-write. Do not be afraid the 
make mistakes. Fail, learn, fix. A truely agile company, knows that we do not write code once. We write
it continuously! A company with a mission, a goal, knows that only great engineers working together and
learning from each other while the managers keep the wolves at bay, is the only way to succeed!</p>

<p>The solution to this problem is almost trivial, I will sum it up in a few lines:</p>

<ol>
  <li>Throw away every process handbook you have</li>
  <li>Fire every engineer you do not trust (not skill, trust!)</li>
  <li>Everyone envolved with the process writes code</li>
  <li>Every requirement or feature needs to have consensus of the team</li>
  <li>For every new feature, delete a feature</li>
  <li>If something works well, make it better</li>
  <li>If something does not work, remove it</li>
</ol>

<p>These are the rules to live by, these rules will increase your chances of success. You do not need a book,
you just need common sense.</p>

<p>I will try to explain the ideas behind the solution briefly. This is not a guide, these are just some things
you can put into practice which will help you make better software:</p>

<p>Every book written is either theorethical, or an account of experience. While the latter is fun to read, it
does not take into account the extraordinary person who achieved those feats. I advice you to focus on the 
employees who are trustworthy and who can inspire your organisation. They will create the software and they
will bring about a better community.</p>

<p>If you do not write code, you do not understand the compexity. I will give a bit of nuance. Everyone 
who is envolved with the project should work with or on the project. This can be, but are not limited to: 
documentation, quality assurance, code or data. A product needs to be good, find people who will make the 
product good, by loving the foundations of your product instead of the titles your organisation hands out.
If you work this way, only features which excite the entire team can go forward. We do not need more 
people mandating or speaking from authority. We need skilled people to be humble and enthousiastic.</p>

<p>We are really bad at cleaning up after ourselves. Especially in an ever evolving code base. We will need
to clean up. And by enforcing that we remove as well as add, we have a better chance to mitigate complexity.</p>

<p>The last two items are about your process. A process should help make something which works well, work better. 
I’ve already said that, but it bears repeating. Please remove every process which does not add benefit, which
hinders developers and which cost money. Focus on making your engineers even more effective!</p>

<h2 id="conclusion">Conclusion</h2>

<p>Scrum, the way it is marketed, the way it is sold, is horrible. Agile and Scrum as a methodology of
agile, is not. For the sake of this industry and the generations to come, who will need to work with the
code and the products we create today, let’s not blindly step into a methodology like scrum or SAFe, but
let’s be honest and talk about what really matters. It is not about a process, it’s about the people
making the products.</p>

<p>To finish the analogy I started at the beginning: <em>The carpenter would have been better off, just hiring a 
good carpenter.</em></p>]]></content><author><name>Carlos Kelkboom</name></author><category term="Programming" /><category term="Agile" /><summary type="html"><![CDATA[I do not pander, I do not soften words and I do not expect everyone to agree with this article. I don’t even think everyone will understand this article. With that said, I want to preface my writing with a general explenation. I love software and I love quality. This article is more a love letter to engineering than a critique on Scrum. If you do want to read this as a critique, I will not hold it against you…]]></summary></entry><entry><title type="html">Inheritance is bad</title><link href="https://baudin999.github.io/blog//blog/2023/08/24/inheritance-is-bad.html" rel="alternate" type="text/html" title="Inheritance is bad" /><published>2023-08-24T00:00:00+02:00</published><updated>2023-08-24T00:00:00+02:00</updated><id>https://baudin999.github.io/blog//blog/2023/08/24/inheritance-is-bad</id><content type="html" xml:base="https://baudin999.github.io/blog//blog/2023/08/24/inheritance-is-bad.html"><![CDATA[<p>I hate inheritance! There, I’ve said it. It’s true, I absolutely hate it. Inheritance destroys any
chance you have of understanding your code. And it always starts with such good intentions. You start
by defining a bit of functionality. Now you add another class and you see that same functionality 
happening in two places. Before you actually realise what has happened, you now have a base class
and two concrete classes. Life seems good right?</p>

<p>Unfortunately, it never ends there. Your program always changes, and the base class which seemed to
give you standard functionality is now hindering you. I am not sure if examples are going to help
with illustrating this point, because it is very hard to see an example of evolving code. It’s the 
insidiousness of inheritance, it looks beautiful in an example, but it destroys productivity in 
real life.</p>

<p>Still, let me try:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">class</span> <span class="nc">Message</span> <span class="p">{</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">Url</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="n">Task</span> <span class="nf">Send</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// send the message</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="k">public</span> <span class="k">class</span> <span class="nc">Player</span> <span class="p">:</span> <span class="n">Message</span> <span class="p">{</span>
    <span class="k">private</span> <span class="k">const</span> <span class="kt">string</span> <span class="n">url</span> <span class="p">=</span> <span class="s">"/player"</span><span class="p">;</span>
    <span class="k">public</span> <span class="nf">Player</span><span class="p">()</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">url</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// construct something</span>
    <span class="p">}</span>
<span class="p">}</span> 
<span class="k">public</span> <span class="k">class</span> <span class="nc">LogMessage</span> <span class="p">:</span> <span class="n">Message</span> <span class="p">{</span>
    <span class="k">private</span> <span class="k">const</span> <span class="kt">string</span> <span class="n">url</span> <span class="p">=</span> <span class="s">"/log"</span><span class="p">;</span>
    <span class="k">public</span> <span class="nf">LogMessage</span><span class="p">()</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">url</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// the ctor</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This seems great right? We can now send random classes to the server! That sounds like a great plan!
But it is not, what we have done is, we’ve tightly coupled the <code class="language-plaintext highlighter-rouge">Player</code> class to a <code class="language-plaintext highlighter-rouge">Message</code>. What we 
are trying to do is that we’re trying to add functionality to the classes which it should not have.</p>

<h2 id="purpose-is-everything">Purpose is everything</h2>
<p>The <code class="language-plaintext highlighter-rouge">Player</code> class has a purpose. It’s to give my game some information about the player. For example:
the handle, the last time they played, the last character they selected. This is the goal of the <code class="language-plaintext highlighter-rouge">Player</code>
class.</p>

<p>We will also need to sync that data between server and client. This is what your networking code is for.
It is not that the <code class="language-plaintext highlighter-rouge">Player</code> class cannot and should not be used as a message. It’s that it’s not it’s
responsibility. By giving the <code class="language-plaintext highlighter-rouge">Player</code> class the responsibility of being able to send itself, we tightly
couple functionalities.</p>

<p>So, how can we solve this? We solve this by designing the system differently. Instead of inheritance we
use a concept called <em>composition</em>. A very clean approach to this is a <em>traits</em> system. It’s clean, it’s
super and it’s easy to understand. Here’s a bit of rust showing the power of the trait system:</p>

<p>We define our classes, notice how there is no information about the url in the struct:</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="n">Player</span><span class="p">;</span>
<span class="k">struct</span> <span class="n">LogMessage</span><span class="p">;</span>
</code></pre></div></div>

<p>We define a trait:</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">pub</span> <span class="k">trait</span> <span class="n">SendMessage</span> <span class="p">{</span>
    <span class="k">fn</span> <span class="nf">send</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">String</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Now, let’s define the classes again:</p>
<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">impl</span> <span class="n">SendMessage</span> <span class="k">for</span> <span class="n">Player</span> <span class="p">{</span>
    <span class="k">fn</span> <span class="nf">send</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">String</span> <span class="p">{</span>
        <span class="k">let</span> <span class="n">url</span> <span class="o">=</span> <span class="s">"/player"</span><span class="p">;</span>
        <span class="nd">format!</span><span class="p">(</span><span class="s">"Sending Player to {}"</span><span class="p">,</span> <span class="n">url</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">impl</span> <span class="n">SendMessage</span> <span class="k">for</span> <span class="n">LogMessage</span> <span class="p">{</span>
    <span class="k">fn</span> <span class="nf">send</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">String</span> <span class="p">{</span>
        <span class="k">let</span> <span class="n">url</span> <span class="o">=</span> <span class="s">"/log"</span><span class="p">;</span>
        <span class="nd">format!</span><span class="p">(</span><span class="s">"Sending LogMessage to {}"</span><span class="p">,</span> <span class="n">url</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>You can even define these traits in a separate module to keep things tight and clean.
We have moved the url to the implementation of the trait, could this be even cleaner?
Of course, but this code serves the purpose of telling the story, everything related
to sending a <code class="language-plaintext highlighter-rouge">struct</code> to the server is contained in the implementation of the trait 
and is not scattered into my business object.</p>

<p>I would use this something like:</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">let</span> <span class="n">player_msg</span> <span class="o">=</span> <span class="n">Player</span><span class="p">;</span>
    <span class="k">let</span> <span class="n">log_msg</span> <span class="o">=</span> <span class="n">LogMessage</span><span class="p">;</span>

    <span class="nf">print_message</span><span class="p">(</span><span class="o">&amp;</span><span class="n">player_msg</span><span class="p">);</span>
    <span class="nf">print_message</span><span class="p">(</span><span class="o">&amp;</span><span class="n">log_msg</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">fn</span> <span class="n">print_message</span><span class="o">&lt;</span><span class="n">T</span><span class="p">:</span> <span class="n">SendMessage</span><span class="o">&gt;</span><span class="p">(</span><span class="n">message</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
    <span class="nd">println!</span><span class="p">(</span><span class="s">"{}"</span><span class="p">,</span> <span class="n">message</span><span class="nf">.send</span><span class="p">());</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Why would I do this? What does it matter? What is the harm in sprinkling some extra
functionality onto a object? The crux of the problem is that when you sprinkle extra 
functionality onto an object through inheritance, you’re not just adding code. You’re 
adding complexity. You’re altering the design contract of that object. Let’s dig a bit 
deeper.</p>

<h3 id="the-myth-of-the-all-powerful-object">The Myth of the All-Powerful Object</h3>

<p>The thought process behind inheritance often stems from the idea of creating this 
“super object” that can do multiple things. It’s tempting, right? Create a class 
that’s not just an entity but can also manage its own persistence, validation, 
transformation, and so forth. The problem is, this leads to objects that have multiple 
responsibilities and violate the 
<a href="https://en.wikipedia.org/wiki/Single-responsibility_principle">Single Responsibility Principle (SRP)</a>.</p>

<p>For me, this SRP is the single most important guideline against complexity. A large
system is very complex, if your objects have a lot of responsibilities it will be
extremely difficult to change the system. If your object do only one thing, this will
become a lot easier.</p>

<p>Before we go into the details of how inheritance make changing code extremely difficult, 
let’s go over a few of the pitfalls of these <em>God Objects</em>.</p>

<h4 id="tight-coupling">Tight coupling</h4>
<p>Objects that inherit functionalities are more tightly coupled. This means, when a base 
class changes, all the derived classes can potentially break. This makes the code less 
flexible and harder to maintain. Now, imagine you have a chain of inheritance, and one 
change in the foundational class cascades across dozens of classes derived from it. 
It’s a maintenance nightmare.</p>

<p>I always have the guideline that a change should only affect the minimal number of files 
and classes. With inheritance, when you touch a base class, you need to recompile every
class inheriting from that base class. This breaks my guideline.</p>

<h4 id="information-hiding">Information hiding</h4>
<p>Inheritance often hides dependencies and through that, information. When you inherit from 
a base class, you might inadvertently inherit behaviors that aren’t immediately visible. 
These hidden behaviors can introduce bugs that are hard to trace because they don’t 
originate from the derived class’s code but from somewhere up the inheritance chain.</p>

<p>It also, literally, hides information. The number of times I have stared at a piece of 
code, amazed at the bug and wondering where it came from, only to discover that the 
actual code which is wreaking havoc on my product is hidden deeply in a inheritance
tree; are too many to count. I like to see what something does. I want everything in 
a single file. I want to set a break-point or <code class="language-plaintext highlighter-rouge">printf</code> some debug info and know what is
happening where.</p>

<h4 id="the-illusion-of-reusability">The illusion of Reusability</h4>
<p>One of the main reasons developers opt for inheritance is reusability. While inheritance 
can provide reusability, it often comes at the cost of flexibility. As shown in the example, 
it’s much cleaner to use composition where each class or trait does one thing and does it
well. It is easier to reuse a small, well-defined component than a large, monolithic one.</p>

<p>Reuse comes in multiple forms, reuse of data and reuse of functionality. When you reuse data
you are reusing information either to display it differently, or to act upon differently.
This is not bad, it is easy to refactor and easy to maintain. Reuse of functionality leads
to all manner of type information being spread throughout the code. Generics, Generic type
guards and interfaces all pop up because we want to reuse. All of these features make 
refactoring your code a lot harder than it needs to be.</p>

<h4 id="example-of-frailty">Example of frailty</h4>

<p>Suppose there’s a new requirement: Players can now have premium and non-premium statuses. 
Premium players’ messages must be sent to a different URL and also need an extra header 
for authentication.</p>

<p>We would write something like:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">class</span> <span class="nc">PremiumPlayer</span> <span class="p">:</span> <span class="n">Player</span> <span class="p">{</span>
    <span class="k">private</span> <span class="k">const</span> <span class="kt">string</span> <span class="n">premiumUrl</span> <span class="p">=</span> <span class="s">"/premium-player"</span><span class="p">;</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">AuthenticationHeader</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>

    <span class="k">public</span> <span class="nf">PremiumPlayer</span><span class="p">(</span><span class="kt">string</span> <span class="n">authHeader</span><span class="p">)</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">premiumUrl</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="n">AuthenticationHeader</span> <span class="p">=</span> <span class="n">authHeader</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// Overriding Send method to include the new header</span>
    <span class="k">public</span> <span class="k">override</span> <span class="n">Task</span> <span class="nf">Send</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// include the AuthenticationHeader</span>
        <span class="c1">// send the message</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>By overriding the Send method, we now bypass the original implementation and have forced
the code to behave differently. We can still use the <code class="language-plaintext highlighter-rouge">PremiumPlayer</code> as if it is a <code class="language-plaintext highlighter-rouge">Player</code>
because of polymorphism. But we can no longer clearly see what is happening. If we want
to change the <code class="language-plaintext highlighter-rouge">Send</code> behavior to always have a header called <code class="language-plaintext highlighter-rouge">x-github-id</code>, we need to 
make this change in two places. Increasing the chance at bugs.</p>

<p>Again, it is hard to find a good <em>static</em> example of this, but if you’ve ever maintained 
a code-base with multiple layers of inheritance you should feel your palms start to sweat
a little by now.</p>

<h2 id="solution">Solution</h2>

<p>How should we solve this problem? We still need to send data to the server, how should 
we do that? There are two ways to approach this problem. I will only describe <em>composition</em>,
but there is a second way, you can make an object per purpose and map between them.</p>

<p>Let’s look at composition. CSharp does not have a trait system, which sucks. It literally
is one of the best ways to do composition, but alas. Let’s look at interfaces first and afterwards 
I will also give an example of moving your functionality to a class which takes a message 
as a parameter.</p>

<h3 id="interfaces">Interfaces</h3>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System.Threading.Tasks</span><span class="p">;</span>

<span class="k">public</span> <span class="k">interface</span> <span class="nc">IMessageSender</span> <span class="p">{</span>
    <span class="n">Task</span> <span class="nf">Send</span><span class="p">(</span><span class="kt">string</span> <span class="n">url</span><span class="p">,</span> <span class="kt">string</span> <span class="n">payload</span><span class="p">,</span> <span class="kt">string</span><span class="p">?</span> <span class="n">header</span> <span class="p">=</span> <span class="k">null</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">interface</span> <span class="nc">IMessage</span> <span class="p">{</span>
    <span class="n">Task</span> <span class="nf">SendMessage</span><span class="p">();</span>
    <span class="kt">string</span> <span class="nf">Serialize</span><span class="p">();</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">Player</span> <span class="p">:</span> <span class="n">IMessage</span> <span class="p">{</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">Url</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span> <span class="p">=</span> <span class="s">"/player"</span><span class="p">;</span>
    <span class="k">protected</span> <span class="k">readonly</span> <span class="n">IMessageSender</span> <span class="n">_sender</span><span class="p">;</span>

    <span class="k">public</span> <span class="nf">Player</span><span class="p">(</span><span class="n">IMessageSender</span> <span class="n">sender</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">_sender</span> <span class="p">=</span> <span class="n">sender</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">virtual</span> <span class="n">Task</span> <span class="nf">SendMessage</span><span class="p">()</span> <span class="p">{</span>
        <span class="kt">string</span> <span class="n">payload</span> <span class="p">=</span> <span class="nf">Serialize</span><span class="p">();</span>
        <span class="k">return</span> <span class="n">_sender</span><span class="p">.</span><span class="nf">Send</span><span class="p">(</span><span class="n">Url</span><span class="p">,</span> <span class="n">payload</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">virtual</span> <span class="kt">string</span> <span class="nf">Serialize</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// Implementation for Player class.</span>
        <span class="c1">// For now, return a placeholder string.</span>
        <span class="k">return</span> <span class="s">"Serialized Player Data"</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">PremiumPlayer</span> <span class="p">:</span> <span class="n">IMessage</span> <span class="p">{</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">Url</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span> <span class="p">=</span> <span class="s">"/premium-player"</span><span class="p">;</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">AuthenticationHeader</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="n">IMessageSender</span> <span class="n">_sender</span><span class="p">;</span>

    <span class="k">public</span> <span class="nf">PremiumPlayer</span><span class="p">(</span><span class="n">IMessageSender</span> <span class="n">sender</span><span class="p">,</span> <span class="kt">string</span> <span class="n">authHeader</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">_sender</span> <span class="p">=</span> <span class="n">sender</span><span class="p">;</span>
        <span class="n">AuthenticationHeader</span> <span class="p">=</span> <span class="n">authHeader</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="n">Task</span> <span class="nf">SendMessage</span><span class="p">()</span> <span class="p">{</span>
        <span class="kt">string</span> <span class="n">payload</span> <span class="p">=</span> <span class="nf">Serialize</span><span class="p">();</span>
        <span class="k">return</span> <span class="n">_sender</span><span class="p">.</span><span class="nf">Send</span><span class="p">(</span><span class="n">Url</span><span class="p">,</span> <span class="n">payload</span><span class="p">,</span> <span class="n">AuthenticationHeader</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="kt">string</span> <span class="nf">Serialize</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// Implementation for PremiumPlayer class.</span>
        <span class="c1">// For now, return a placeholder string.</span>
        <span class="k">return</span> <span class="s">"Serialized PremiumPlayer Data"</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>We are passing the <code class="language-plaintext highlighter-rouge">IMessageSender</code> to the <code class="language-plaintext highlighter-rouge">IMessage</code> class and with that service we are injecting
we can send the message. This is a more natural way of writing the code. I still do not like it
that the <code class="language-plaintext highlighter-rouge">Player</code> and <code class="language-plaintext highlighter-rouge">PremiumPlayer</code> classes have these methods which are strictly for sending them, 
like the <code class="language-plaintext highlighter-rouge">SendMessage</code> method and the <code class="language-plaintext highlighter-rouge">Serialize</code> method, but at least they belong to the <code class="language-plaintext highlighter-rouge">IMessage</code>
interface and not longer to the class itself.</p>

<h3 id="layers-or-services">Layers or Services</h3>
<p>Another way to structure this is by making the <code class="language-plaintext highlighter-rouge">MessageSender.Send</code> a function we can call with
the correct parameters. We can even make separate methods, making sure we handle the messages
correctly, no matter what the message is.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">interface</span> <span class="nc">ISerializable</span> <span class="p">{</span>
    <span class="kt">string</span> <span class="nf">Serialize</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Our data classes:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">class</span> <span class="nc">Player</span> <span class="p">:</span> <span class="n">ISerializable</span> <span class="p">{</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">int</span> <span class="n">Score</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

    <span class="k">public</span> <span class="kt">string</span> <span class="nf">Serialize</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// Convert the player data to a string (e.g., JSON)</span>
        <span class="k">return</span> <span class="n">System</span><span class="p">.</span><span class="n">Text</span><span class="p">.</span><span class="n">Json</span><span class="p">.</span><span class="n">JsonSerializer</span><span class="p">.</span><span class="nf">Serialize</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">PremiumPlayer</span> <span class="p">:</span> <span class="n">ISerializable</span> <span class="p">{</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">int</span> <span class="n">Score</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">AuthenticationHeader</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

    <span class="k">public</span> <span class="kt">string</span> <span class="nf">Serialize</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// Convert the premium player data to a string (e.g., JSON)</span>
        <span class="k">return</span> <span class="n">System</span><span class="p">.</span><span class="n">Text</span><span class="p">.</span><span class="n">Json</span><span class="p">.</span><span class="n">JsonSerializer</span><span class="p">.</span><span class="nf">Serialize</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">MessageSender</code>:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">class</span> <span class="nc">MessageSender</span> <span class="p">{</span>
    <span class="k">public</span> <span class="n">Task</span> <span class="nf">Send</span><span class="p">(</span><span class="kt">string</span> <span class="n">url</span><span class="p">,</span> <span class="n">ISerializable</span> <span class="n">payload</span><span class="p">,</span> <span class="kt">string</span><span class="p">?</span> <span class="n">header</span> <span class="p">=</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">var</span> <span class="n">serializedData</span> <span class="p">=</span> <span class="n">payload</span><span class="p">.</span><span class="nf">Serialize</span><span class="p">();</span>
        <span class="c1">// do your thing</span>
        <span class="k">return</span> <span class="n">Task</span><span class="p">.</span><span class="n">CompletedTask</span><span class="p">;</span> 
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Now we add a proxy layer, something we go through just for the sake of sending the message:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">class</span> <span class="nc">PlayerService</span> <span class="p">{</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="n">MessageSender</span> <span class="n">_messageSender</span><span class="p">;</span>

    <span class="k">public</span> <span class="nf">PlayerService</span><span class="p">(</span><span class="n">MessageSender</span> <span class="n">messageSender</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">_messageSender</span> <span class="p">=</span> <span class="n">messageSender</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="n">Task</span> <span class="nf">SendPlayer</span><span class="p">(</span><span class="n">Player</span> <span class="n">player</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">string</span> <span class="n">url</span> <span class="p">=</span> <span class="s">"/player"</span><span class="p">;</span>
        <span class="k">return</span> <span class="n">_messageSender</span><span class="p">.</span><span class="nf">Send</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">player</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="n">Task</span> <span class="nf">SendPremiumPlayer</span><span class="p">(</span><span class="n">PremiumPlayer</span> <span class="n">premiumPlayer</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">string</span> <span class="n">url</span> <span class="p">=</span> <span class="s">"/premium-player"</span><span class="p">;</span>
        <span class="kt">string</span> <span class="n">authenticationHeader</span> <span class="p">=</span> <span class="s">"yo-I-am-he!"</span><span class="p">;</span>
        <span class="k">return</span> <span class="n">_messageSender</span><span class="p">.</span><span class="nf">Send</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">premiumPlayer</span><span class="p">,</span> <span class="n">authenticationHeader</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This comes a lot closer to a nice separation of concerns. One other thing to notice is that 
I do not have to use interfaces. I just pass in the actual classes. The code is so simple that
I even have a hard time advocating for a lot of tests. I would however run large integration
and black box tests in a system like this.</p>

<h2 id="should-you-really-never-use-inheritance">Should you really never use inheritance?</h2>

<p>Inheritance is a contentious subject for many reasons, but there is one application of inheritance 
that I do wholeheartedly endorse: the inheritance of pure data classes. Let me elaborate.</p>

<p>Consider a scenario where many entities in your system need a unique identifier, a creation 
timestamp, or some other common set of properties. In these cases, it makes sense to have a base 
class like an Entity that represents the common attributes shared by multiple domain objects.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">abstract</span> <span class="k">class</span> <span class="nc">Entity</span> <span class="p">{</span>
    <span class="k">public</span> <span class="n">Guid</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="n">DateTime</span> <span class="n">CreatedAt</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

    <span class="k">public</span> <span class="nf">Entity</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">Id</span> <span class="p">=</span> <span class="n">Guid</span><span class="p">.</span><span class="nf">NewGuid</span><span class="p">();</span>
        <span class="n">CreatedAt</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">UtcNow</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>In this example, our Entity class has two properties: an identifier (<code class="language-plaintext highlighter-rouge">Id</code>) and a timestamp indicating 
when the entity was created (<code class="language-plaintext highlighter-rouge">CreatedAt</code>). Let’s take a look at our earlier <code class="language-plaintext highlighter-rouge">Player</code> class and see how 
it could inherit from this <code class="language-plaintext highlighter-rouge">Entity</code> class.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">class</span> <span class="nc">Player</span> <span class="p">:</span> <span class="n">Entity</span> <span class="p">{</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">int</span> <span class="n">Score</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This now means that every <code class="language-plaintext highlighter-rouge">Player</code> object will automatically have an <code class="language-plaintext highlighter-rouge">Id</code> and <code class="language-plaintext highlighter-rouge">CreatedAt</code> property without 
us having to define it explicitly in the <code class="language-plaintext highlighter-rouge">Player</code> class. And it’s not just <code class="language-plaintext highlighter-rouge">Player</code> - any other class in 
our system that needs these properties can simply inherit from Entity.</p>

<h1 id="conclusion">Conclusion</h1>

<p>While inheritance <em>is</em> inherently evil. Like all tools in the programmer’s toolkit, it has its time and place.
The key is understanding when and how to use it effectively. For behavior-based functionality, composition, 
interfaces, and other patterns usually offer a more flexible and maintainable approach. But for pure data 
classes where there’s a clear, shared set of attributes across multiple objects, inheritance can be a 
practical solution. Just be sure always to use it judiciously and remain mindful of its potential pitfalls.</p>]]></content><author><name>Carlos Kelkboom</name></author><category term="Programming" /><category term="OOP" /><summary type="html"><![CDATA[I hate inheritance! There, I’ve said it. It’s true, I absolutely hate it. Inheritance destroys any chance you have of understanding your code. And it always starts with such good intentions. You start by defining a bit of functionality. Now you add another class and you see that same functionality happening in two places. Before you actually realise what has happened, you now have a base class and two concrete classes. Life seems good right?]]></summary></entry><entry><title type="html">Beyond Coding</title><link href="https://baudin999.github.io/blog//blog/2023/08/24/beyond-coding.html" rel="alternate" type="text/html" title="Beyond Coding" /><published>2023-08-24T00:00:00+02:00</published><updated>2023-08-24T00:00:00+02:00</updated><id>https://baudin999.github.io/blog//blog/2023/08/24/beyond-coding</id><content type="html" xml:base="https://baudin999.github.io/blog//blog/2023/08/24/beyond-coding.html"><![CDATA[<p>Hey everyone, I’ve had the tremendous honor and pleasure to have a conversation with 🎙Patrick Akil of Beyond Coding Podcast.</p>

<p>I think we touched on a few very important topics, please let me know where you think I, or we, were wrong. Let’s keep this conversation alive for the sake of our IT industry.</p>

<iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/6QfyY9ffz6M?si=diDL6H-g_g3ubbrE" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen=""></iframe>

<p><a href="https://www.youtube.com/watch?v=6QfyY9ffz6M">YouTube</a>
<a href="https://www.linkedin.com/posts/carlos-k-4016b8225_innovation-and-disruption-through-software-activity-7099278724696567808-wOij?utm_source=share&amp;utm_medium=member_desktop">linkedin</a></p>]]></content><author><name>Carlos Kelkboom</name></author><category term="Programming" /><category term="Personal" /><category term="Agile" /><summary type="html"><![CDATA[Hey everyone, I’ve had the tremendous honor and pleasure to have a conversation with 🎙Patrick Akil of Beyond Coding Podcast.]]></summary></entry><entry><title type="html">Hello, World</title><link href="https://baudin999.github.io/blog//blog/2023/08/23/hello-world.html" rel="alternate" type="text/html" title="Hello, World" /><published>2023-08-23T00:00:00+02:00</published><updated>2023-08-23T00:00:00+02:00</updated><id>https://baudin999.github.io/blog//blog/2023/08/23/hello-world</id><content type="html" xml:base="https://baudin999.github.io/blog//blog/2023/08/23/hello-world.html"><![CDATA[<p>Writing and blogging have always been incredibly important. Most of the things I’ve learned have been through a medium like this. Of course, I have learned a lot from watching YouTube videos or conversing with colleagues, but the written medium stands out like no other. After two decades in this business, I am ready to contribute to the conversation.</p>

<p>My field, the field of software development, feels disrupted. It feels like it is no longer the discipline it once was. There are too many people who have traded skills for salary. Just look at the number of people calling themselves “React Devs”. With these writings, I want to express myself, and if, for some reason, people find it helpful, I would enjoy that a lot.</p>

<p>As a first topic, I want to write about writing. To write something, is to put something on paper which translates your inner thoughts into distinct words which trigger a sensation or a memory in the minds of the reader. Writing is not something I take lightly. It is very difficult to get my message across in such a way that the reader actually understands what I am writing. But I have learned some tricks which I would like to share with you.</p>

<h2 id="first-rule-of-writing">First rule of writing</h2>
<p>You should never write something in a vacuum. You will need people to review and revise your work. You will need people you trust around you challenging your assumptions and your writing style. You might feel like you have articulated your point well, but that is not up to you! That is up to the reader. So the first rule of writing is:</p>

<blockquote>
  <p>Ask for help</p>
</blockquote>

<h2 id="second-rule-of-writing">Second rule of writing</h2>
<p>To write something is to preserve a moment in time. A moment when your brain fired neurons in that particular order. A moment when
you saw the light bounce off a metallic object in such a way, that it inspired you to put ink to paper. This moment in time: this 
amalgamation of luck and skill resulted in words. These words contain your views, your opinions, your perception of the world in that
moment.</p>

<p>Do not be afraid of that moment, but realise that what you are writing is going to age. And most likely, it will not age well. Embrace
that, but do everything you can to realise that you are not writing for yourself, but you are writing for future readers. Keep your 
words readable, keep hidden knowledge to a minimum and keep you language short and well-spoken. The second rule of writing is:</p>

<blockquote>
  <p>Write for the future, not for the present</p>
</blockquote>

<h2 id="third-rule-of-writing">Third rule of writing</h2>
<p>Do not think that there is only one way or one medium. When you write, you take detours; when you watch, you want quick successions of
setup and resolution. Think about how things translate from one medium to the next; for example, this blog post might end up as a 
YouTube video. But I cannot “just read” this out loud. I will have to rewrite.</p>

<p>The third rule of writing:</p>

<blockquote>
  <p>Every word, every sentence has a purpose</p>
</blockquote>

<h1 id="conclusion">Conclusion</h1>
<p>I hope you’ve enjoyed this first post. I also hope you’ve noticed that these rules are not only for writing prose, but are also 
extremely important when writing code. I will leave the explanation of this to the reader. But we would all do well if we remember
these rules.</p>]]></content><author><name>Carlos Kelkboom</name></author><category term="Programming" /><category term="Writing" /><category term="Personal" /><summary type="html"><![CDATA[Writing and blogging have always been incredibly important. Most of the things I’ve learned have been through a medium like this. Of course, I have learned a lot from watching YouTube videos or conversing with colleagues, but the written medium stands out like no other. After two decades in this business, I am ready to contribute to the conversation.]]></summary></entry></feed>