<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://baudin999.github.io/blog//blog/feed.xml" rel="self" type="application/atom+xml" /><link href="https://baudin999.github.io/blog//blog/" rel="alternate" type="text/html" hreflang="en" /><updated>2023-08-24T19:40:33+02:00</updated><id>https://baudin999.github.io/blog//blog/feed.xml</id><title type="html">Carlos’s Blog</title><subtitle>I have been consuming the combined knowledge of my heroes for years. Now, after over 20 years as a software developer, I am ready to give back to everyone. I hope you enjoy!</subtitle><author><name>Carlos Kelkboom</name><email>baudin-sky@pm.me</email></author><entry><title type="html">Inheritance is bad</title><link href="https://baudin999.github.io/blog//blog/2023/08/24/inheritance-is-bad.html" rel="alternate" type="text/html" title="Inheritance is bad" /><published>2023-08-24T00:00:00+02:00</published><updated>2023-08-24T00:00:00+02:00</updated><id>https://baudin999.github.io/blog//blog/2023/08/24/inheritance-is-bad</id><content type="html" xml:base="https://baudin999.github.io/blog//blog/2023/08/24/inheritance-is-bad.html"><![CDATA[<p>I hate inheritance! There, I’ve said it. It’s true, I absolutely hate it. Inheritance destroys any
chance you have of understanding your code. And it always starts with such good intentions. You start
by defining a bit of functionality. Now you add another class and you see that same functionality 
happening in two places. Before you actually realise what has happened, you now have a base class
and two concrete classes. Life seems good right?</p>

<p>Unfortunately, it never ends there. Your program always changes, and the base class which seemed to
give you standard functionality is now hindering you. I am not sure if examples are going to help
with illustrating this point, because it is very hard to see an example of evolving code. It’s the 
insidiousness of inheritance, it looks beautiful in an example, but it destroys productivity in 
real life.</p>

<p>Still, let me try:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">class</span> <span class="nc">Message</span> <span class="p">{</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">Url</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="n">Task</span> <span class="nf">Send</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// send the message</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="k">public</span> <span class="k">class</span> <span class="nc">Player</span> <span class="p">:</span> <span class="n">Message</span> <span class="p">{</span>
    <span class="k">private</span> <span class="k">const</span> <span class="kt">string</span> <span class="n">url</span> <span class="p">=</span> <span class="s">"/player"</span><span class="p">;</span>
    <span class="k">public</span> <span class="nf">Player</span><span class="p">()</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">url</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// construct something</span>
    <span class="p">}</span>
<span class="p">}</span> 
<span class="k">public</span> <span class="k">class</span> <span class="nc">LogMessage</span> <span class="p">:</span> <span class="n">Message</span> <span class="p">{</span>
    <span class="k">private</span> <span class="k">const</span> <span class="kt">string</span> <span class="n">url</span> <span class="p">=</span> <span class="s">"/log"</span><span class="p">;</span>
    <span class="k">public</span> <span class="nf">LogMessage</span><span class="p">()</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">url</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// the ctor</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This seems great right? We can now send random classes to the server! That sounds like a great plan!
But it is not, what we have done is, we’ve tightly coupled the <code class="language-plaintext highlighter-rouge">Player</code> class to a <code class="language-plaintext highlighter-rouge">Message</code>. What we 
are trying to do is that we’re trying to add functionality to the classes which it should not have.</p>

<h2 id="purpose-is-everything">Purpose is everything</h2>
<p>The <code class="language-plaintext highlighter-rouge">Player</code> class has a purpose. It’s to give my game some information about the player. For example:
the handle, the last time they played, the last character they selected. This is the goal of the <code class="language-plaintext highlighter-rouge">Player</code>
class.</p>

<p>We will also need to sync that data between server and client. This is what your networking code is for.
It is not that the <code class="language-plaintext highlighter-rouge">Player</code> class cannot and should not be used as a message. It’s that it’s not it’s
responsibility. By giving the <code class="language-plaintext highlighter-rouge">Player</code> class the responsibility of being able to send itself, we tightly
couple functionalities.</p>

<p>So, how can we solve this? We solve this by designing the system differently. Instead of inheritance we
use a concept called <em>composition</em>. A very clean approach to this is a <em>traits</em> system. It’s clean, it’s
super and it’s easy to understand. Here’s a bit of rust showing the power of the trait system:</p>

<p>We define our classes, notice how there is no information about the url in the struct:</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="n">Player</span><span class="p">;</span>
<span class="k">struct</span> <span class="n">LogMessage</span><span class="p">;</span>
</code></pre></div></div>

<p>We define a trait:</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">pub</span> <span class="k">trait</span> <span class="n">SendMessage</span> <span class="p">{</span>
    <span class="k">fn</span> <span class="nf">send</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">String</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Now, let’s define the classes again:</p>
<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">impl</span> <span class="n">SendMessage</span> <span class="k">for</span> <span class="n">Player</span> <span class="p">{</span>
    <span class="k">fn</span> <span class="nf">send</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">String</span> <span class="p">{</span>
        <span class="k">let</span> <span class="n">url</span> <span class="o">=</span> <span class="s">"/player"</span><span class="p">;</span>
        <span class="nd">format!</span><span class="p">(</span><span class="s">"Sending Player to {}"</span><span class="p">,</span> <span class="n">url</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">impl</span> <span class="n">SendMessage</span> <span class="k">for</span> <span class="n">LogMessage</span> <span class="p">{</span>
    <span class="k">fn</span> <span class="nf">send</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">String</span> <span class="p">{</span>
        <span class="k">let</span> <span class="n">url</span> <span class="o">=</span> <span class="s">"/log"</span><span class="p">;</span>
        <span class="nd">format!</span><span class="p">(</span><span class="s">"Sending LogMessage to {}"</span><span class="p">,</span> <span class="n">url</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>You can even define these traits in a separate module to keep things tight and clean.
We have moved the url to the implementation of the trait, could this be even cleaner?
Of course, but this code serves the purpose of telling the story, everything related
to sending a <code class="language-plaintext highlighter-rouge">struct</code> to the server is contained in the implementation of the trait 
and is not scattered into my business object.</p>

<p>I would use this something like:</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">let</span> <span class="n">player_msg</span> <span class="o">=</span> <span class="n">Player</span><span class="p">;</span>
    <span class="k">let</span> <span class="n">log_msg</span> <span class="o">=</span> <span class="n">LogMessage</span><span class="p">;</span>

    <span class="nf">print_message</span><span class="p">(</span><span class="o">&amp;</span><span class="n">player_msg</span><span class="p">);</span>
    <span class="nf">print_message</span><span class="p">(</span><span class="o">&amp;</span><span class="n">log_msg</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">fn</span> <span class="n">print_message</span><span class="o">&lt;</span><span class="n">T</span><span class="p">:</span> <span class="n">SendMessage</span><span class="o">&gt;</span><span class="p">(</span><span class="n">message</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
    <span class="nd">println!</span><span class="p">(</span><span class="s">"{}"</span><span class="p">,</span> <span class="n">message</span><span class="nf">.send</span><span class="p">());</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Why would I do this? What does it matter? What is the harm in sprinkling some extra
functionality onto a object? The crux of the problem is that when you sprinkle extra 
functionality onto an object through inheritance, you’re not just adding code. You’re 
adding complexity. You’re altering the design contract of that object. Let’s dig a bit 
deeper.</p>

<h3 id="the-myth-of-the-all-powerful-object">The Myth of the All-Powerful Object</h3>

<p>The thought process behind inheritance often stems from the idea of creating this 
“super object” that can do multiple things. It’s tempting, right? Create a class 
that’s not just an entity but can also manage its own persistence, validation, 
transformation, and so forth. The problem is, this leads to objects that have multiple 
responsibilities and violate the 
<a href="https://en.wikipedia.org/wiki/Single-responsibility_principle">Single Responsibility Principle (SRP)</a>.</p>

<p>For me, this SRP is the single most important guideline against complexity. A large
system is very complex, if your objects have a lot of responsibilities it will be
extremely difficult to change the system. If your object do only one thing, this will
become a lot easier.</p>

<p>Before we go into the details of how inheritance make changing code extremely difficult, 
let’s go over a few of the pitfalls of these <em>God Objects</em>.</p>

<h4 id="tight-coupling">Tight coupling</h4>
<p>Objects that inherit functionalities are more tightly coupled. This means, when a base 
class changes, all the derived classes can potentially break. This makes the code less 
flexible and harder to maintain. Now, imagine you have a chain of inheritance, and one 
change in the foundational class cascades across dozens of classes derived from it. 
It’s a maintenance nightmare.</p>

<p>I always have the guideline that a change should only affect the minimal number of files 
and classes. With inheritance, when you touch a base class, you need to recompile every
class inheriting from that base class. This breaks my guideline.</p>

<h4 id="information-hiding">Information hiding</h4>
<p>Inheritance often hides dependencies and through that, information. When you inherit from 
a base class, you might inadvertently inherit behaviors that aren’t immediately visible. 
These hidden behaviors can introduce bugs that are hard to trace because they don’t 
originate from the derived class’s code but from somewhere up the inheritance chain.</p>

<p>It also, literally, hides information. The number of times I have stared at a piece of 
code, amazed at the bug and wondering where it came from, only to discover that the 
actual code which is wreaking havoc on my product is hidden deeply in a inheritance
tree; are too many to count. I like to see what something does. I want everything in 
a single file. I want to set a break-point or <code class="language-plaintext highlighter-rouge">printf</code> some debug info and know what is
happening where.</p>

<h4 id="the-illusion-of-reusability">The illusion of Reusability</h4>
<p>One of the main reasons developers opt for inheritance is reusability. While inheritance 
can provide reusability, it often comes at the cost of flexibility. As shown in the example, 
it’s much cleaner to use composition where each class or trait does one thing and does it
well. It is easier to reuse a small, well-defined component than a large, monolithic one.</p>

<p>Reuse comes in multiple forms, reuse of data and reuse of functionality. When you reuse data
you are reusing information either to display it differently, or to act upon differently.
This is not bad, it is easy to refactor and easy to maintain. Reuse of functionality leads
to all manner of type information being spread throughout the code. Generics, Generic type
guards and interfaces all pop up because we want to reuse. All of these features make 
refactoring your code a lot harder than it needs to be.</p>

<h4 id="example-of-frailty">Example of frailty</h4>

<p>Suppose there’s a new requirement: Players can now have premium and non-premium statuses. 
Premium players’ messages must be sent to a different URL and also need an extra header 
for authentication.</p>

<p>We would write something like:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">class</span> <span class="nc">PremiumPlayer</span> <span class="p">:</span> <span class="n">Player</span> <span class="p">{</span>
    <span class="k">private</span> <span class="k">const</span> <span class="kt">string</span> <span class="n">premiumUrl</span> <span class="p">=</span> <span class="s">"/premium-player"</span><span class="p">;</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">AuthenticationHeader</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>

    <span class="k">public</span> <span class="nf">PremiumPlayer</span><span class="p">(</span><span class="kt">string</span> <span class="n">authHeader</span><span class="p">)</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">premiumUrl</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="n">AuthenticationHeader</span> <span class="p">=</span> <span class="n">authHeader</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// Overriding Send method to include the new header</span>
    <span class="k">public</span> <span class="k">override</span> <span class="n">Task</span> <span class="nf">Send</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// include the AuthenticationHeader</span>
        <span class="c1">// send the message</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>By overriding the Send method, we now bypass the original implementation and have forced
the code to behave differently. We can still use the <code class="language-plaintext highlighter-rouge">PremiumPlayer</code> as if it is a <code class="language-plaintext highlighter-rouge">Player</code>
because of polymorphism. But we can no longer clearly see what is happening. If we want
to change the <code class="language-plaintext highlighter-rouge">Send</code> behavior to always have a header called <code class="language-plaintext highlighter-rouge">x-github-id</code>, we need to 
make this change in two places. Increasing the chance at bugs.</p>

<p>Again, it is hard to find a good <em>static</em> example of this, but if you’ve ever maintained 
a code-base with multiple layers of inheritance you should feel your palms start to sweat
a little by now.</p>

<h2 id="solution">Solution</h2>

<p>How should we solve this problem? We still need to send data to the server, how should 
we do that? There are two ways to approach this problem. I will only describe <em>composition</em>,
but there is a second way, you can make an object per purpose and map between them.</p>

<p>Let’s look at composition. CSharp does not have a trait system, which sucks. It literally
is one of the best ways to do composition, but alas. Let’s look at interfaces first and afterwards 
I will also give an example of moving your functionality to a class which takes a message 
as a parameter.</p>

<h3 id="interfaces">Interfaces</h3>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System.Threading.Tasks</span><span class="p">;</span>

<span class="k">public</span> <span class="k">interface</span> <span class="nc">IMessageSender</span> <span class="p">{</span>
    <span class="n">Task</span> <span class="nf">Send</span><span class="p">(</span><span class="kt">string</span> <span class="n">url</span><span class="p">,</span> <span class="kt">string</span> <span class="n">payload</span><span class="p">,</span> <span class="kt">string</span><span class="p">?</span> <span class="n">header</span> <span class="p">=</span> <span class="k">null</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">interface</span> <span class="nc">IMessage</span> <span class="p">{</span>
    <span class="n">Task</span> <span class="nf">SendMessage</span><span class="p">();</span>
    <span class="kt">string</span> <span class="nf">Serialize</span><span class="p">();</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">Player</span> <span class="p">:</span> <span class="n">IMessage</span> <span class="p">{</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">Url</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span> <span class="p">=</span> <span class="s">"/player"</span><span class="p">;</span>
    <span class="k">protected</span> <span class="k">readonly</span> <span class="n">IMessageSender</span> <span class="n">_sender</span><span class="p">;</span>

    <span class="k">public</span> <span class="nf">Player</span><span class="p">(</span><span class="n">IMessageSender</span> <span class="n">sender</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">_sender</span> <span class="p">=</span> <span class="n">sender</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">virtual</span> <span class="n">Task</span> <span class="nf">SendMessage</span><span class="p">()</span> <span class="p">{</span>
        <span class="kt">string</span> <span class="n">payload</span> <span class="p">=</span> <span class="nf">Serialize</span><span class="p">();</span>
        <span class="k">return</span> <span class="n">_sender</span><span class="p">.</span><span class="nf">Send</span><span class="p">(</span><span class="n">Url</span><span class="p">,</span> <span class="n">payload</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">virtual</span> <span class="kt">string</span> <span class="nf">Serialize</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// Implementation for Player class.</span>
        <span class="c1">// For now, return a placeholder string.</span>
        <span class="k">return</span> <span class="s">"Serialized Player Data"</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">PremiumPlayer</span> <span class="p">:</span> <span class="n">IMessage</span> <span class="p">{</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">Url</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span> <span class="p">=</span> <span class="s">"/premium-player"</span><span class="p">;</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">AuthenticationHeader</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="n">IMessageSender</span> <span class="n">_sender</span><span class="p">;</span>

    <span class="k">public</span> <span class="nf">PremiumPlayer</span><span class="p">(</span><span class="n">IMessageSender</span> <span class="n">sender</span><span class="p">,</span> <span class="kt">string</span> <span class="n">authHeader</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">_sender</span> <span class="p">=</span> <span class="n">sender</span><span class="p">;</span>
        <span class="n">AuthenticationHeader</span> <span class="p">=</span> <span class="n">authHeader</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="n">Task</span> <span class="nf">SendMessage</span><span class="p">()</span> <span class="p">{</span>
        <span class="kt">string</span> <span class="n">payload</span> <span class="p">=</span> <span class="nf">Serialize</span><span class="p">();</span>
        <span class="k">return</span> <span class="n">_sender</span><span class="p">.</span><span class="nf">Send</span><span class="p">(</span><span class="n">Url</span><span class="p">,</span> <span class="n">payload</span><span class="p">,</span> <span class="n">AuthenticationHeader</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="kt">string</span> <span class="nf">Serialize</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// Implementation for PremiumPlayer class.</span>
        <span class="c1">// For now, return a placeholder string.</span>
        <span class="k">return</span> <span class="s">"Serialized PremiumPlayer Data"</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>We are passing the <code class="language-plaintext highlighter-rouge">IMessageSender</code> to the <code class="language-plaintext highlighter-rouge">IMessage</code> class and with that service we are injecting
we can send the message. This is a more natural way of writing the code. I still do not like it
that the <code class="language-plaintext highlighter-rouge">Player</code> and <code class="language-plaintext highlighter-rouge">PremiumPlayer</code> classes have these methods which are strictly for sending them, 
like the <code class="language-plaintext highlighter-rouge">SendMessage</code> method and the <code class="language-plaintext highlighter-rouge">Serialize</code> method, but at least they belong to the <code class="language-plaintext highlighter-rouge">IMessage</code>
interface and not longer to the class itself.</p>

<h3 id="layers-or-services">Layers or Services</h3>
<p>Another way to structure this is by making the <code class="language-plaintext highlighter-rouge">MessageSender.Send</code> a function we can call with
the correct parameters. We can even make separate methods, making sure we handle the messages
correctly, no matter what the message is.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">interface</span> <span class="nc">ISerializable</span> <span class="p">{</span>
    <span class="kt">string</span> <span class="nf">Serialize</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Our data classes:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">class</span> <span class="nc">Player</span> <span class="p">:</span> <span class="n">ISerializable</span> <span class="p">{</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">int</span> <span class="n">Score</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

    <span class="k">public</span> <span class="kt">string</span> <span class="nf">Serialize</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// Convert the player data to a string (e.g., JSON)</span>
        <span class="k">return</span> <span class="n">System</span><span class="p">.</span><span class="n">Text</span><span class="p">.</span><span class="n">Json</span><span class="p">.</span><span class="n">JsonSerializer</span><span class="p">.</span><span class="nf">Serialize</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">PremiumPlayer</span> <span class="p">:</span> <span class="n">ISerializable</span> <span class="p">{</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">int</span> <span class="n">Score</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">AuthenticationHeader</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

    <span class="k">public</span> <span class="kt">string</span> <span class="nf">Serialize</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// Convert the premium player data to a string (e.g., JSON)</span>
        <span class="k">return</span> <span class="n">System</span><span class="p">.</span><span class="n">Text</span><span class="p">.</span><span class="n">Json</span><span class="p">.</span><span class="n">JsonSerializer</span><span class="p">.</span><span class="nf">Serialize</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">MessageSender</code>:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">class</span> <span class="nc">MessageSender</span> <span class="p">{</span>
    <span class="k">public</span> <span class="n">Task</span> <span class="nf">Send</span><span class="p">(</span><span class="kt">string</span> <span class="n">url</span><span class="p">,</span> <span class="n">ISerializable</span> <span class="n">payload</span><span class="p">,</span> <span class="kt">string</span><span class="p">?</span> <span class="n">header</span> <span class="p">=</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">var</span> <span class="n">serializedData</span> <span class="p">=</span> <span class="n">payload</span><span class="p">.</span><span class="nf">Serialize</span><span class="p">();</span>
        <span class="c1">// do your thing</span>
        <span class="k">return</span> <span class="n">Task</span><span class="p">.</span><span class="n">CompletedTask</span><span class="p">;</span> 
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Now we add a proxy layer, something we go through just for the sake of sending the message:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">class</span> <span class="nc">PlayerService</span> <span class="p">{</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="n">MessageSender</span> <span class="n">_messageSender</span><span class="p">;</span>

    <span class="k">public</span> <span class="nf">PlayerService</span><span class="p">(</span><span class="n">MessageSender</span> <span class="n">messageSender</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">_messageSender</span> <span class="p">=</span> <span class="n">messageSender</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="n">Task</span> <span class="nf">SendPlayer</span><span class="p">(</span><span class="n">Player</span> <span class="n">player</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">string</span> <span class="n">url</span> <span class="p">=</span> <span class="s">"/player"</span><span class="p">;</span>
        <span class="k">return</span> <span class="n">_messageSender</span><span class="p">.</span><span class="nf">Send</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">player</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="n">Task</span> <span class="nf">SendPremiumPlayer</span><span class="p">(</span><span class="n">PremiumPlayer</span> <span class="n">premiumPlayer</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">string</span> <span class="n">url</span> <span class="p">=</span> <span class="s">"/premium-player"</span><span class="p">;</span>
        <span class="kt">string</span> <span class="n">authenticationHeader</span> <span class="p">=</span> <span class="s">"yo-I-am-he!"</span><span class="p">;</span>
        <span class="k">return</span> <span class="n">_messageSender</span><span class="p">.</span><span class="nf">Send</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">premiumPlayer</span><span class="p">,</span> <span class="n">authenticationHeader</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This comes a lot closer to a nice separation of concerns. One other thing to notice is that 
I do not have to use interfaces. I just pass in the actual classes. The code is so simple that
I even have a hard time advocating for a lot of tests. I would however run large integration
and black box tests in a system like this.</p>

<h2 id="should-you-really-never-use-inheritance">Should you really never use inheritance?</h2>

<p>Inheritance is a contentious subject for many reasons, but there is one application of inheritance 
that I do wholeheartedly endorse: the inheritance of pure data classes. Let me elaborate.</p>

<p>Consider a scenario where many entities in your system need a unique identifier, a creation 
timestamp, or some other common set of properties. In these cases, it makes sense to have a base 
class like an Entity that represents the common attributes shared by multiple domain objects.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">abstract</span> <span class="k">class</span> <span class="nc">Entity</span> <span class="p">{</span>
    <span class="k">public</span> <span class="n">Guid</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="n">DateTime</span> <span class="n">CreatedAt</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

    <span class="k">public</span> <span class="nf">Entity</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">Id</span> <span class="p">=</span> <span class="n">Guid</span><span class="p">.</span><span class="nf">NewGuid</span><span class="p">();</span>
        <span class="n">CreatedAt</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">UtcNow</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>In this example, our Entity class has two properties: an identifier (<code class="language-plaintext highlighter-rouge">Id</code>) and a timestamp indicating 
when the entity was created (<code class="language-plaintext highlighter-rouge">CreatedAt</code>). Let’s take a look at our earlier <code class="language-plaintext highlighter-rouge">Player</code> class and see how 
it could inherit from this <code class="language-plaintext highlighter-rouge">Entity</code> class.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">class</span> <span class="nc">Player</span> <span class="p">:</span> <span class="n">Entity</span> <span class="p">{</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">int</span> <span class="n">Score</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This now means that every <code class="language-plaintext highlighter-rouge">Player</code> object will automatically have an <code class="language-plaintext highlighter-rouge">Id</code> and <code class="language-plaintext highlighter-rouge">CreatedAt</code> property without 
us having to define it explicitly in the <code class="language-plaintext highlighter-rouge">Player</code> class. And it’s not just <code class="language-plaintext highlighter-rouge">Player</code> - any other class in 
our system that needs these properties can simply inherit from Entity.</p>

<h1 id="conclusion">Conclusion</h1>

<p>While inheritance <em>is</em> inherently evil. Like all tools in the programmer’s toolkit, it has its time and place.
The key is understanding when and how to use it effectively. For behavior-based functionality, composition, 
interfaces, and other patterns usually offer a more flexible and maintainable approach. But for pure data 
classes where there’s a clear, shared set of attributes across multiple objects, inheritance can be a 
practical solution. Just be sure always to use it judiciously and remain mindful of its potential pitfalls.</p>]]></content><author><name>Carlos Kelkboom</name></author><category term="Programming" /><category term="OOP" /><summary type="html"><![CDATA[I hate inheritance! There, I’ve said it. It’s true, I absolutely hate it. Inheritance destroys any chance you have of understanding your code. And it always starts with such good intentions. You start by defining a bit of functionality. Now you add another class and you see that same functionality happening in two places. Before you actually realise what has happened, you now have a base class and two concrete classes. Life seems good right?]]></summary></entry><entry><title type="html">Beyond Coding</title><link href="https://baudin999.github.io/blog//blog/2023/08/24/beyond-coding.html" rel="alternate" type="text/html" title="Beyond Coding" /><published>2023-08-24T00:00:00+02:00</published><updated>2023-08-24T00:00:00+02:00</updated><id>https://baudin999.github.io/blog//blog/2023/08/24/beyond-coding</id><content type="html" xml:base="https://baudin999.github.io/blog//blog/2023/08/24/beyond-coding.html"><![CDATA[<p>Hey everyone, I’ve had the tremendous honor and pleasure to have a conversation with 🎙Patrick Akil of Beyond Coding Podcast.</p>

<p>I think we touched on a few very important topics, please let me know where you think I, or we, were wrong. Let’s keep this conversation alive for the sake of our IT industry.</p>

<iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/6QfyY9ffz6M?si=diDL6H-g_g3ubbrE" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen=""></iframe>

<p><a href="https://www.youtube.com/watch?v=6QfyY9ffz6M">YouTube</a>
<a href="https://www.linkedin.com/posts/carlos-k-4016b8225_innovation-and-disruption-through-software-activity-7099278724696567808-wOij?utm_source=share&amp;utm_medium=member_desktop">linkedin</a></p>]]></content><author><name>Carlos Kelkboom</name></author><category term="Programming" /><category term="Personal" /><category term="Agile" /><summary type="html"><![CDATA[Hey everyone, I’ve had the tremendous honor and pleasure to have a conversation with 🎙Patrick Akil of Beyond Coding Podcast.]]></summary></entry><entry><title type="html">Hello, World</title><link href="https://baudin999.github.io/blog//blog/2023/08/23/hello-world.html" rel="alternate" type="text/html" title="Hello, World" /><published>2023-08-23T00:00:00+02:00</published><updated>2023-08-23T00:00:00+02:00</updated><id>https://baudin999.github.io/blog//blog/2023/08/23/hello-world</id><content type="html" xml:base="https://baudin999.github.io/blog//blog/2023/08/23/hello-world.html"><![CDATA[<p>Writing and blogging have always been incredibly important. Most of the things I’ve learned have been through a medium like this. Of course, I have learned a lot from watching YouTube videos or conversing with colleagues, but the written medium stands out like no other. After two decades in this business, I am ready to contribute to the conversation.</p>

<p>My field, the field of software development, feels disrupted. It feels like it is no longer the discipline it once was. There are too many people who have traded skills for salary. Just look at the number of people calling themselves “React Devs”. With these writings, I want to express myself, and if, for some reason, people find it helpful, I would enjoy that a lot.</p>

<p>As a first topic, I want to write about writing. To write something, is to put something on paper which translates your inner thoughts into distinct words which trigger a sensation or a memory in the minds of the reader. Writing is not something I take lightly. It is very difficult to get my message across in such a way that the reader actually understands what I am writing. But I have learned some tricks which I would like to share with you.</p>

<h2 id="first-rule-of-writing">First rule of writing</h2>
<p>You should never write something in a vacuum. You will need people to review and revise your work. You will need people you trust around you challenging your assumptions and your writing style. You might feel like you have articulated your point well, but that is not up to you! That is up to the reader. So the first rule of writing is:</p>

<blockquote>
  <p>Ask for help</p>
</blockquote>

<h2 id="second-rule-of-writing">Second rule of writing</h2>
<p>To write something is to preserve a moment in time. A moment when your brain fired neurons in that particular order. A moment when
you saw the light bounce off a metallic object in such a way, that it inspired you to put ink to paper. This moment in time: this 
amalgamation of luck and skill resulted in words. These words contain your views, your opinions, your perception of the world in that
moment.</p>

<p>Do not be afraid of that moment, but realise that what you are writing is going to age. And most likely, it will not age well. Embrace
that, but do everything you can to realise that you are not writing for yourself, but you are writing for future readers. Keep your 
words readable, keep hidden knowledge to a minimum and keep you language short and well-spoken. The second rule of writing is:</p>

<blockquote>
  <p>Write for the future, not for the present</p>
</blockquote>

<h2 id="third-rule-of-writing">Third rule of writing</h2>
<p>Do not think that there is only one way or one medium. When you write, you take detours; when you watch, you want quick successions of
setup and resolution. Think about how things translate from one medium to the next; for example, this blog post might end up as a 
YouTube video. But I cannot “just read” this out loud. I will have to rewrite.</p>

<p>The third rule of writing:</p>

<blockquote>
  <p>Every word, every sentence has a purpose</p>
</blockquote>

<h1 id="conclusion">Conclusion</h1>
<p>I hope you’ve enjoyed this first post. I also hope you’ve noticed that these rules are not only for writing prose, but are also 
extremely important when writing code. I will leave the explanation of this to the reader. But we would all do well if we remember
these rules.</p>]]></content><author><name>Carlos Kelkboom</name></author><category term="Programming" /><category term="Writing" /><category term="Personal" /><summary type="html"><![CDATA[Writing and blogging have always been incredibly important. Most of the things I’ve learned have been through a medium like this. Of course, I have learned a lot from watching YouTube videos or conversing with colleagues, but the written medium stands out like no other. After two decades in this business, I am ready to contribute to the conversation.]]></summary></entry></feed>