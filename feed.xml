<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://baudin999.github.io/blog//blog/feed.xml" rel="self" type="application/atom+xml" /><link href="https://baudin999.github.io/blog//blog/" rel="alternate" type="text/html" hreflang="en" /><updated>2023-09-21T10:11:37+02:00</updated><id>https://baudin999.github.io/blog//blog/feed.xml</id><title type="html">Carlos’s Blog</title><subtitle>I have been consuming the combined knowledge of my heroes for years. Now, after over 20 years as a software developer, I am ready to give back to everyone. I hope you enjoy!</subtitle><author><name>Carlos Kelkboom</name><email>baudin-sky@pm.me</email></author><entry><title type="html">GoLang, a brief tutorial</title><link href="https://baudin999.github.io/blog//blog/2023/08/25/go-brief-tutorial.html" rel="alternate" type="text/html" title="GoLang, a brief tutorial" /><published>2023-08-25T00:00:00+02:00</published><updated>2023-08-25T00:00:00+02:00</updated><id>https://baudin999.github.io/blog//blog/2023/08/25/go-brief-tutorial</id><content type="html" xml:base="https://baudin999.github.io/blog//blog/2023/08/25/go-brief-tutorial.html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#things-well-need-to-know" id="markdown-toc-things-well-need-to-know">Things we’ll need to know</a>    <ul>
      <li><a href="#-vs-" id="markdown-toc--vs-"><code class="language-plaintext highlighter-rouge">:=</code> vs <code class="language-plaintext highlighter-rouge">=</code></a></li>
      <li><a href="#type-conversions" id="markdown-toc-type-conversions">Type conversions</a>        <ul>
          <li><a href="#the-basic-premise" id="markdown-toc-the-basic-premise">The Basic Premise</a></li>
          <li><a href="#why-so-strict" id="markdown-toc-why-so-strict">Why so strict?</a></li>
          <li><a href="#closing-thoughts" id="markdown-toc-closing-thoughts">Closing thoughts</a></li>
        </ul>
      </li>
      <li><a href="#deferred-statements" id="markdown-toc-deferred-statements">Deferred statements</a></li>
      <li><a href="#multiple-return-values" id="markdown-toc-multiple-return-values">Multiple return values</a></li>
    </ul>
  </li>
  <li><a href="#working-with-collections" id="markdown-toc-working-with-collections">Working with collections</a>    <ul>
      <li><a href="#arrays" id="markdown-toc-arrays">Arrays</a></li>
      <li><a href="#slices" id="markdown-toc-slices">Slices</a></li>
    </ul>
  </li>
  <li><a href="#structs" id="markdown-toc-structs">Structs</a>    <ul>
      <li><a href="#interfaces" id="markdown-toc-interfaces">Interfaces</a></li>
      <li><a href="#types-of-receivers" id="markdown-toc-types-of-receivers">Types of receivers</a></li>
    </ul>
  </li>
  <li><a href="#go_routines" id="markdown-toc-go_routines">Go Routines</a>    <ul>
      <li><a href="#waiting-on-multiple-go-routines" id="markdown-toc-waiting-on-multiple-go-routines">Waiting on multiple go routines</a></li>
    </ul>
  </li>
  <li><a href="#appendix" id="markdown-toc-appendix">APPENDIX</a>    <ul>
      <li><a href="#working_with_uuids" id="markdown-toc-working_with_uuids">Working with UUIDs</a></li>
      <li><a href="#pointers" id="markdown-toc-pointers">Working with pointers</a></li>
      <li><a href="#concurrency" id="markdown-toc-concurrency">Concurrency vs Parallelism</a></li>
    </ul>
  </li>
</ul>

<blockquote>
  <p>This post is going to be a bit longer than my normal posts. It is 
  also going to be more technical than my normal posts. This is because
  I truly enjoy writing <a href="https://go.dev/">GoLang</a>. The language is a
  breath of fresh air and in this post I want to share this feeling with you 
  by going over a few of the powerful features of go.</p>
</blockquote>

<p>What shall we start with? I want something which really shows the power of
GoLang. I want something which is useful. Let’s create a small game server!</p>

<blockquote>
  <p>Disclaimer: this is <em>not</em> the way to create an actual game server for
  an MMO RPG, this is a tutorial on GoLang, not game servers.</p>
</blockquote>

<h2 id="things-well-need-to-know">Things we’ll need to know</h2>
<p>In this chapter we will go into some details of the language. I will not
describe things like addition or multiplication. But only things which make
go special.</p>

<h3 id="-vs-"><code class="language-plaintext highlighter-rouge">:=</code> vs <code class="language-plaintext highlighter-rouge">=</code></h3>
<p>One thing in Go which immediately pops out is the use of either the <code class="language-plaintext highlighter-rouge">:=</code> or
the <code class="language-plaintext highlighter-rouge">=</code>. The difference is simple:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">=</code> assign a value to an already defined variable</li>
  <li><code class="language-plaintext highlighter-rouge">:=</code> define the variable and assign a value immediately</li>
</ul>

<p>Remember that programs are concerned with memory, if I want to retrieve the 
value of an <code class="language-plaintext highlighter-rouge">int32</code> I know that I need to start somewhere and retrieve the 
next 32 bits. This is why we declare a variable beforehand, preparing the 
runtime to allocate a specific amount of memory like so:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="n">i</span> <span class="kt">int</span>
<span class="n">i</span> <span class="o">=</span> <span class="m">4</span>
</code></pre></div></div>

<p>We can use the syntactic sugar of Go and write that as:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">i</span> <span class="o">:=</span> <span class="m">4</span>
</code></pre></div></div>

<p>We infer the type, because at the time of assigning the value we know the type
of the value and know how much memory we need to reserve.</p>

<p>We can also assign multiple values at once:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">:=</span> <span class="m">2</span><span class="p">,</span> <span class="m">4</span>
</code></pre></div></div>

<blockquote>
  <p>Here be dragons! I personally dislike this syntax, yes, it saves you a line
  but what does it actually bring you? Nothing much in my honest opinion, just
  more things your eyes need to get used to. Here’s my advice, try to write code
  like it’s 1965, one statement per line!</p>
</blockquote>

<h3 id="type-conversions">Type conversions</h3>

<p>In the intricate tapestry of programming, the type of data stands as a sentinel, 
ensuring that we, the programmers, are aware of what we’re working with. Go, 
unlike some dynamically-typed languages, is statically-typed. This means that 
the type of a variable is known at compile-time, bringing with it both robustness 
and responsibility. With robustness comes the safety net of type-checking, 
preventing many runtime errors. With responsibility, though, comes the need 
for explicit type conversions.</p>

<h4 id="the-basic-premise">The Basic Premise</h4>

<p>In Go, unlike some other languages where conversions might occur automatically 
(often termed as “type coercion”), you must be explicit about type conversions.</p>

<blockquote>
  <p>Go is proud not to have type coercion which is <em>implicit</em> type conversion, while
  go has <em>explicit</em> type conversions.</p>
</blockquote>

<p>Consider two integer types: <code class="language-plaintext highlighter-rouge">int</code> and <code class="language-plaintext highlighter-rouge">int64</code>. Even if they’re both integer types, 
you cannot assign a value of type int to a variable of type <code class="language-plaintext highlighter-rouge">int64</code> without a type conversion.</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="n">x</span> <span class="kt">int</span> <span class="o">=</span> <span class="m">42</span>
<span class="k">var</span> <span class="n">y</span> <span class="kt">int64</span>
<span class="n">y</span> <span class="o">=</span> <span class="n">x</span>  <span class="c">// This will raise a compile-time error</span>
</code></pre></div></div>

<p>To successfully assign the value of <code class="language-plaintext highlighter-rouge">x</code> to <code class="language-plaintext highlighter-rouge">y</code>, a type conversion is needed:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">y</span> <span class="o">=</span> <span class="kt">int64</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>  <span class="c">// This is correct</span>
</code></pre></div></div>

<h4 id="why-so-strict">Why so strict?</h4>
<p>You might wonder: if both are integers, why fuss about the conversion? Here’s where we tread back in time, embracing the lessons from the punch card era. The need for clarity and the intentional action is paramount. Automatic type coercion can lead to unpredictable results and hard-to-trace bugs, especially when precision and memory layouts come into play. Go’s philosophy prioritizes clarity over assumed convenience.</p>

<p>Type conversions aren’t limited to numerical types. Let’s venture into converting between other data types.</p>

<p>Strings to byte slices:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">s</span> <span class="o">:=</span> <span class="s">"hello"</span>
<span class="n">b</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</code></pre></div></div>

<p>And back:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">b</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">{</span><span class="sc">'h'</span><span class="p">,</span> <span class="sc">'e'</span><span class="p">,</span> <span class="sc">'l'</span><span class="p">,</span> <span class="sc">'l'</span><span class="p">,</span> <span class="sc">'o'</span><span class="p">}</span>
<span class="n">s</span> <span class="o">:=</span> <span class="kt">string</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
</code></pre></div></div>

<h4 id="closing-thoughts">Closing thoughts</h4>
<p>In the programming landscapes of yesteryears, there was a deeply ingrained need for 
precision, borne out of the constraints of the technology of the time. With punch cards, 
every line had to matter, and clarity was not just a virtue but a necessity. Go, in its 
design, seems to hark back to those principles.</p>

<p>An absolute beast of an argument is that the compiler has fewer ambiguities to wrestle with. 
It knows precisely what is expected and doesn’t need to infer or decide on potential type coercions.
Go’s compiler is extremely fast and things like this are the reason why!</p>

<p>While modern tooling and programming languages have moved towards flexibility and convenience, 
often at the expense of clarity, Go stands somewhat apart. By making type conversions explicit, 
it ensures that programmers are always in control, always aware, and never taken by surprise 
by implicit decisions made on their behalf.</p>

<p>Remember, in the world of software, clarity ensures longevity, readability, and often, reliability. 
Embrace it, even if it means typing a few extra characters.</p>

<h3 id="deferred-statements">Deferred statements</h3>

<p>A deferred statement is executed right before the function exits, in reverse 
order. This means that you can add these deferred statements to clean things
up. GoLang is garbage collected, but that does not mean that we need to be
sloppy.</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">example</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"Start"</span><span class="p">)</span>
    <span class="k">defer</span> <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"Middle"</span><span class="p">)</span>
    <span class="k">defer</span> <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"Middle 2"</span><span class="p">)</span>
    <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"End"</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>If we execute this program, we will get the following output:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Start</span>
<span class="n">End</span>
<span class="n">Middle</span> <span class="m">2</span>
<span class="n">Middle</span>
</code></pre></div></div>
<p>Another great example is handling a connection from a TCP server. This example
will bring us closer to the actual server we will be implementing:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">handleConnection</span><span class="p">(</span><span class="n">conn</span> <span class="n">net</span><span class="o">.</span><span class="n">Conn</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">defer</span> <span class="n">conn</span><span class="o">.</span><span class="n">Close</span><span class="p">()</span>

    <span class="c">// create a buffer of fixed size 1024</span>
    <span class="n">buffer</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="m">1024</span><span class="p">)</span>
    <span class="c">// read from stream</span>
    <span class="n">length</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">conn</span><span class="o">.</span><span class="n">Read</span><span class="p">(</span><span class="n">buffer</span><span class="p">)</span>
    <span class="c">//echo the message</span>
    <span class="n">_</span><span class="p">,</span> <span class="n">err2</span> <span class="o">:=</span> <span class="n">conn</span><span class="o">.</span><span class="n">Write</span><span class="p">(</span><span class="n">buffer</span><span class="p">[</span><span class="o">:</span><span class="n">length</span><span class="p">])</span>
<span class="p">}</span>
</code></pre></div></div>

<p>I have removed all the error handling, this is because it would obfuscate the
code. But in go, you will have to use a variable if you assign it. This code
will not build:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; go build .
# test
.\main.go:58:10: err declared and not used
.\main.go:60:5: err2 declared and not used
</code></pre></div></div>

<p>More importantly, the defer statement at the top of the function makes sure 
that we close the connection before exiting the function. Another thing to
note is that <code class="language-plaintext highlighter-rouge">conn.Read(buffer)</code> is a blocking operation. This means that 
if we put this code in a loop:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">func</span> <span class="n">handleConnection</span><span class="p">(</span><span class="n">conn</span> <span class="n">net</span><span class="o">.</span><span class="n">Conn</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">defer</span> <span class="n">conn</span><span class="o">.</span><span class="n">Close</span><span class="p">()</span>

    <span class="k">for</span> <span class="p">{</span>
        <span class="n">buffer</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="m">1024</span><span class="p">)</span>
        <span class="c">// ...</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The function will run until there is a network error, or some other failure in
the system, at which point, the deferred statement will be executed and the 
connection will be closed.</p>

<h3 id="multiple-return-values">Multiple return values</h3>
<p>Go is refreshingly different, in that in Go, you can return multiple values. 
You might have seen this happening where <code class="language-plaintext highlighter-rouge">conn.Read()</code> would return both the <code class="language-plaintext highlighter-rouge">length</code>
and a potential error. Combine this with the fact that you <em>have</em> to use a 
variable once you’ve declared it, and this makes for some robust error handling.</p>

<blockquote>
  <p>Many people find this way of enforcing error handling tedious, but it makes
  for a robust and utterly transparent way of working. Combine this with an
  aversion to generics, so no Monads, and you have an amazingly consistent and
  simple language in which you can write very performant, garbage collected, 
  easy to maintain solutions. The downside is the amount of boilerplate.</p>
</blockquote>

<p>Look at this example:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">foo</span><span class="p">()</span> <span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">return</span> <span class="m">2</span><span class="p">,</span> <span class="s">"wow!"</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Some might recognize this pattern as being similar to returning a tuple 
in other languages and then destructuring it. However, Go doesn’t have 
traditional tuples. The syntax just gives the feel of returning multiple 
values directly.</p>

<p>Another powerful example is:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">(</span>
    <span class="s">"math"</span>
    <span class="s">"errors"</span>
    <span class="s">"fmt"</span>
<span class="p">)</span>
<span class="k">func</span> <span class="n">sqrt</span><span class="p">(</span><span class="n">i</span> <span class="kt">int</span><span class="p">)</span> <span class="p">(</span><span class="kt">float64</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">if</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="m">0</span> <span class="p">{</span>
		<span class="k">return</span> <span class="o">-</span><span class="m">1</span><span class="p">,</span> <span class="n">errors</span><span class="o">.</span><span class="n">New</span><span class="p">(</span><span class="s">"must be non negative"</span><span class="p">)</span>
	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
		<span class="k">return</span> <span class="n">math</span><span class="o">.</span><span class="n">Sqrt</span><span class="p">(</span><span class="kt">float64</span><span class="p">(</span><span class="n">i</span><span class="p">)),</span> <span class="no">nil</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>In this basic example, we force the user of our <code class="language-plaintext highlighter-rouge">sqrt</code> function to handle the error
if we pass in a negative number.</p>

<p>You would use it like this:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">value</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">sqrt</span><span class="p">(</span><span class="o">-</span><span class="m">2</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"Well done! "</span> <span class="o">+</span> <span class="n">fmt</span><span class="o">.</span><span class="n">Sprintf</span><span class="p">(</span><span class="s">"%f"</span><span class="p">,</span> <span class="n">value</span><span class="p">))</span>

        <span class="c">// alternatively</span>
        <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"Well done! %f</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="working-with-collections">Working with collections</h2>
<p>Let’s define a player type first<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span> <span class="n">Player</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="n">Id</span>          <span class="n">uuid</span><span class="o">.</span><span class="n">UUID</span>
    <span class="n">Connection</span>  <span class="n">net</span><span class="o">.</span><span class="n">Conn</span>
<span class="p">}</span>
</code></pre></div></div>

<p>If we wanted to store a player in an array, in go we call this type a slice
because it does not have a fixed length, we can create a variable which holds 
references<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup> to <code class="language-plaintext highlighter-rouge">Player</code> objects:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="n">players</span> <span class="p">[]</span><span class="o">*</span><span class="n">Player</span>
</code></pre></div></div>

<p>We can now change our connection code to add the player to the players. This code
will also include a bit of the boilerplate code you will need to start a TCP 
server in Go.</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">startServer</span><span class="p">(</span><span class="n">address</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
    <span class="c">// start the tcp listener and close it when the function</span>
    <span class="c">// goes out of scope. </span>
    <span class="n">listener</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">net</span><span class="o">.</span><span class="n">Listen</span><span class="p">(</span><span class="s">"tcp"</span><span class="p">,</span> <span class="n">address</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"Error starting server:"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
        <span class="n">os</span><span class="o">.</span><span class="n">Exit</span><span class="p">(</span><span class="m">1</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="k">defer</span> <span class="n">listener</span><span class="o">.</span><span class="n">Close</span><span class="p">()</span>

    <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"Server started on"</span><span class="p">,</span> <span class="n">address</span><span class="p">)</span>

    <span class="c">// create an infinite loop where we keep </span>
    <span class="c">// accepting connections to our TCP server</span>
    <span class="k">for</span> <span class="p">{</span>
        <span class="n">conn</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">listener</span><span class="o">.</span><span class="n">Accept</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
            <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"Connection error:"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
            <span class="k">continue</span>
        <span class="p">}</span>

        <span class="c">// Create the new player</span>
        <span class="n">playerId</span> <span class="o">:=</span> <span class="n">uuid</span><span class="o">.</span><span class="n">New</span><span class="p">()</span>
        <span class="n">newPlayer</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="n">Player</span><span class="p">{</span>
            <span class="n">Id</span><span class="o">:</span>         <span class="n">playerId</span><span class="p">,</span>
            <span class="n">Connection</span><span class="o">:</span> <span class="n">conn</span><span class="p">,</span>
        <span class="p">}</span>
        <span class="c">// append the player to the players slice</span>
        <span class="c">// notice how it's a simple function and not</span>
        <span class="c">// a method on the players slice itself.</span>
        <span class="c">// It also return the new slice, you need to</span>
        <span class="c">// assign it to the variable again.</span>
        <span class="n">players</span> <span class="o">=</span> <span class="nb">append</span><span class="p">(</span><span class="n">players</span><span class="p">,</span> <span class="n">newPlayer</span><span class="p">)</span>

        <span class="c">// Handle the connection in a go routine</span>
        <span class="k">go</span> <span class="n">handleConnection</span><span class="p">(</span><span class="n">newPlayer</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>A lot of interesting things are happening here. If you want to skip ahead to 
<a href="#go_routines">go routines</a> I won’t hold it against you, they are fascinating!
But for those who want to keep on reading about arrays and slices will hopefully
be rewarded as well.</p>

<h3 id="arrays">Arrays</h3>
<p>An array in Go is a sequence of elements defined with a specific, fixed length. The length is part of the array’s type, which means arrays of different lengths are considered different types.</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="n">arr</span> <span class="p">[</span><span class="m">3</span><span class="p">]</span><span class="kt">int</span> <span class="c">// Declares an array of three integers</span>
<span class="n">arr</span><span class="p">[</span><span class="m">0</span><span class="p">]</span> <span class="o">=</span> <span class="m">1</span>
<span class="n">arr</span><span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="o">=</span> <span class="m">2</span>
<span class="n">arr</span><span class="p">[</span><span class="m">2</span><span class="p">]</span> <span class="o">=</span> <span class="m">3</span>
<span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>  <span class="c">// Outputs: [1 2 3]</span>
</code></pre></div></div>

<h3 id="slices">Slices</h3>
<p>Slices, on the other hand, are dynamic. They don’t have a fixed size like arrays. Under the hood, a slice references a section (or the entirety) of an array. Slices are more common in Go than arrays due to their flexibility.</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="n">s</span> <span class="p">[]</span><span class="kt">int</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="o">:</span><span class="m">2</span><span class="p">]</span> <span class="c">// Creates a slice from the first two elements of our previous arr</span>
<span class="n">s</span> <span class="o">=</span> <span class="nb">append</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="m">4</span><span class="p">)</span>      <span class="c">// Appends 4 to the slice</span>
<span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>        <span class="c">// Outputs: [1 2 4]</span>
</code></pre></div></div>

<h2 id="structs">Structs</h2>

<p>In Go, we can define our own types. I call these <em>product types</em> because the type
can contain the cross product of all the field’s values. Take for example this struct:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span> <span class="n">Vector3</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="n">X</span> <span class="kt">int</span>
    <span class="n">Y</span> <span class="kt">int</span>
    <span class="n">Z</span> <span class="kt">int</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This <code class="language-plaintext highlighter-rouge">Vector3</code> can have all the combined values of all integers.</p>

<p>Now, we might want to add a method on this struct, for example, we might want to 
calculate the length of the vector:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">v</span> <span class="n">Vector3</span><span class="p">)</span> <span class="n">Length</span><span class="p">()</span> <span class="kt">int</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">math</span><span class="o">.</span><span class="n">Sqrt</span><span class="p">(</span><span class="n">v</span><span class="o">.</span><span class="n">X</span> <span class="o">*</span> <span class="n">v</span><span class="o">.</span><span class="n">X</span> <span class="o">+</span> <span class="n">v</span><span class="o">.</span><span class="n">Y</span> <span class="o">*</span> <span class="n">v</span><span class="o">.</span><span class="n">Y</span> <span class="o">+</span> <span class="n">v</span><span class="o">.</span><span class="n">Z</span> <span class="o">*</span> <span class="n">v</span><span class="o">.</span><span class="n">Z</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="interfaces">Interfaces</h3>
<p>Interfaces are another great example of simplicity in Go:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span> <span class="n">vector</span> <span class="k">interface</span> <span class="p">{</span>
    <span class="n">Length</span><span class="p">()</span> <span class="kt">int</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Now that we have defined the interface <code class="language-plaintext highlighter-rouge">vector</code>. Our Vector3 struct automatically 
implements this interface.</p>

<blockquote>
  <p>This concept is called <em>Duck Typing</em>. If it walks like a duck and if it 
  quacks like a duck…</p>
</blockquote>

<h3 id="types-of-receivers">Types of receivers</h3>
<p>If we look back at the code for the length of the vector. We might think we can 
modify it. Imagine the following method:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">v</span> <span class="n">Vector3</span><span class="p">)</span> <span class="n">ScalarMultiply</span><span class="p">(</span><span class="n">i</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">v</span><span class="o">.</span><span class="n">X</span> <span class="o">=</span> <span class="n">v</span><span class="o">.</span><span class="n">X</span> <span class="o">*</span> <span class="n">i</span>
    <span class="n">v</span><span class="o">.</span><span class="n">Y</span> <span class="o">=</span> <span class="n">v</span><span class="o">.</span><span class="n">Y</span> <span class="o">*</span> <span class="n">i</span>
    <span class="n">v</span><span class="o">.</span><span class="n">Z</span> <span class="o">=</span> <span class="n">v</span><span class="o">.</span><span class="n">Z</span> <span class="o">*</span> <span class="n">i</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">vec</span> <span class="o">:=</span> <span class="n">Vector3</span><span class="p">{</span>
        <span class="n">X</span><span class="o">:</span> <span class="m">3</span><span class="p">,</span>
        <span class="n">Y</span><span class="o">:</span> <span class="m">4</span><span class="p">,</span>
        <span class="n">Z</span><span class="o">:</span> <span class="m">5</span><span class="p">,</span>
    <span class="p">}</span>
    <span class="n">vec</span><span class="o">.</span><span class="n">ScalarMultiply</span><span class="p">(</span><span class="m">2</span><span class="p">)</span>

    <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"What is x? %d"</span><span class="p">,</span> <span class="n">vec</span><span class="o">.</span><span class="n">X</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>First off, I will get a warning:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ineffective assignment to field Vector3.Z (SA4005)go-staticcheck
</code></pre></div></div>

<p>This warning shows that lines 2 to 5 are ineffective, they do not modify the 
vector passed in.</p>

<p>Secondly, the value printed to the screen would be:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>What is x? 3
</code></pre></div></div>

<p>This shows that we have not mutated the vector being passed in. This is something
to realize when working with Go, the <em>Value Receiver</em> receives the value as a copy. 
You cannot change the values of the original directly.</p>

<p>If you wanted to, you could either return a new Vector3:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">v</span> <span class="n">Vector3</span><span class="p">)</span> <span class="n">ScalarMultiply</span><span class="p">(</span><span class="n">i</span> <span class="kt">int</span><span class="p">)</span> <span class="n">Vector3</span> <span class="p">{</span>
	<span class="k">return</span> <span class="n">Vector3</span><span class="p">{</span>
		<span class="n">X</span><span class="o">:</span> <span class="n">v</span><span class="o">.</span><span class="n">X</span> <span class="o">*</span> <span class="n">i</span><span class="p">,</span>
		<span class="n">Y</span><span class="o">:</span> <span class="n">v</span><span class="o">.</span><span class="n">Y</span> <span class="o">*</span> <span class="n">i</span><span class="p">,</span>
		<span class="n">Z</span><span class="o">:</span> <span class="n">v</span><span class="o">.</span><span class="n">Z</span> <span class="o">*</span> <span class="n">i</span><span class="p">,</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Or, you could create a <em>Pointer Receiver</em>:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">v</span> <span class="o">*</span><span class="n">Vector3</span><span class="p">)</span> <span class="n">ScalarMultiply</span><span class="p">(</span><span class="n">i</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">v</span><span class="o">.</span><span class="n">X</span> <span class="o">=</span> <span class="n">v</span><span class="o">.</span><span class="n">X</span> <span class="o">*</span> <span class="n">i</span>
    <span class="n">v</span><span class="o">.</span><span class="n">Y</span> <span class="o">=</span> <span class="n">v</span><span class="o">.</span><span class="n">Y</span> <span class="o">*</span> <span class="n">i</span>
    <span class="n">v</span><span class="o">.</span><span class="n">Z</span> <span class="o">=</span> <span class="n">v</span><span class="o">.</span><span class="n">Z</span> <span class="o">*</span> <span class="n">i</span>
<span class="p">}</span>
</code></pre></div></div>

<p>By passing in a reference (a pointer<sup id="fnref:2:1" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup>) to a <code class="language-plaintext highlighter-rouge">Vector3</code> object, we can mutate the values.
This distinction is essential to grasp in Go. It provides a powerful and clear way to 
specify whether a method can modify an object’s values.</p>

<h2 id="go_routines">Go Routines</h2>

<p>Now, the moment you have all been waiting for. The true reason we all want to learn Go:
<strong><em>Concurrency</em></strong>!</p>

<p>In Go, we have two concepts, the concept of a <em>go routine</em> and the concept of a <em>channel</em>.
You can’t explain the first without the second and vice versa. So this is going to be a 
heavy chapter.</p>

<p>A <em>go routine</em> is a light-weight concurrency<sup id="fnref:3" role="doc-noteref"><a href="#fn:3" class="footnote" rel="footnote">3</a></sup> model managed by the Go runtime. You should 
not think of it as multithreading or other types of parallelism, but think of them
as fleeting, small, functions you can execute independently of each other. I know it’s 
hard to understand the definition, and I am being “loosy-goosy” with the terms, but I 
am convinced that the definitions become easier when we dive into some code.</p>

<blockquote>
  <p>Please feel free to play around with this code, the more you play, the more you learn!</p>
</blockquote>

<p>Imagine the standard <a href="https://en.wikipedia.org/wiki/Fizz_buzz">Fizz Buzz</a> problem. Now, let’s
solve that using go and move from there to a concurrent model.</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">fizzBuzz</span><span class="p">(</span><span class="n">i</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="n">i</span><span class="o">%</span><span class="m">15</span> <span class="o">==</span> <span class="m">0</span> <span class="p">{</span>
        <span class="n">fmt</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"%d FizzBuzz</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="n">i</span><span class="o">%</span><span class="m">5</span> <span class="o">==</span> <span class="m">0</span> <span class="p">{</span>
        <span class="n">fmt</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"%d Buzz</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="n">i</span><span class="o">%</span><span class="m">3</span> <span class="o">==</span> <span class="m">0</span> <span class="p">{</span>
        <span class="n">fmt</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"%d Fizz</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">const</span> <span class="n">max</span> <span class="o">=</span> <span class="m">100</span>
    <span class="k">for</span> <span class="n">i</span> <span class="o">:=</span> <span class="m">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span><span class="n">max</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">{</span>
        <span class="n">fizzBuzz</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This code runs and runs well. But we want more, we want to update the UI independently
of the checking of the Fizz Buzz state. We want to split this code into small, self-
executing parts.</p>

<p>Let’s execute <code class="language-plaintext highlighter-rouge">fizzBuzz</code> as a go routine! The only thing we need to do is to add the 
keyword <code class="language-plaintext highlighter-rouge">go</code> in front of the fizzBuzz function call.</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">fizzBuzz</span><span class="p">(</span><span class="n">i</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="n">i</span><span class="o">%</span><span class="m">15</span> <span class="o">==</span> <span class="m">0</span> <span class="p">{</span>
        <span class="n">fmt</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"%d FizzBuzz</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="n">i</span><span class="o">%</span><span class="m">5</span> <span class="o">==</span> <span class="m">0</span> <span class="p">{</span>
        <span class="n">fmt</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"%d Buzz</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="n">i</span><span class="o">%</span><span class="m">3</span> <span class="o">==</span> <span class="m">0</span> <span class="p">{</span>
        <span class="n">fmt</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"%d Fizz</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">const</span> <span class="n">max</span> <span class="o">=</span> <span class="m">100</span>
    <span class="k">for</span> <span class="n">i</span> <span class="o">:=</span> <span class="m">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span><span class="n">max</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">{</span>
        <span class="k">go</span> <span class="n">fizzBuzz</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>That’s it, we now execute this function concurrently! If you run it, you will probably 
notice that the console only prints one or two “Fizz” “Buzz” statements. This is because
spawning a go routine 100 times is much, much faster than the IO for printing the result.
This is where channels come in. We can signal the system that we are done.</p>

<blockquote>
  <p>Channels are a way to transfer data safely from one go routine to another. In other 
  languages, there is always a problem in receiving data from one concurrent process and
  use that data in another process, for example the main or UI process. Channels give you
  a powerful tool with a simple API to manage this complexity.</p>
</blockquote>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">fizzBuzz</span><span class="p">(</span><span class="n">i</span> <span class="kt">int</span><span class="p">,</span> <span class="n">done</span> <span class="k">chan</span><span class="o">&lt;-</span> <span class="kt">bool</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">if</span> <span class="n">i</span><span class="o">%</span><span class="m">15</span> <span class="o">==</span> <span class="m">0</span> <span class="p">{</span>
		<span class="n">fmt</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"%d FizzBuzz</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span>
	<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="n">i</span><span class="o">%</span><span class="m">5</span> <span class="o">==</span> <span class="m">0</span> <span class="p">{</span>
        <span class="n">fmt</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"%d Buzz</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="n">i</span><span class="o">%</span><span class="m">3</span> <span class="o">==</span> <span class="m">0</span> <span class="p">{</span>
        <span class="n">fmt</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"%d Fizz</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span>
    <span class="p">}</span>

	<span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="m">100</span> <span class="p">{</span>
		<span class="n">done</span> <span class="o">&lt;-</span> <span class="no">true</span>
	<span class="p">}</span>
<span class="p">}</span>
<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="k">const</span> <span class="n">max</span> <span class="o">=</span> <span class="m">100</span>
	<span class="n">done</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="k">chan</span> <span class="kt">bool</span><span class="p">)</span>
	<span class="k">for</span> <span class="n">i</span> <span class="o">:=</span> <span class="m">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">max</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">{</span>
		<span class="k">go</span> <span class="n">fizzBuzz</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">done</span><span class="p">)</span>
	<span class="p">}</span>

	<span class="o">&lt;-</span><span class="n">done</span>
<span class="p">}</span>
</code></pre></div></div>

<p>We now have a signal which we get trough the channel named <code class="language-plaintext highlighter-rouge">done</code>. This signal
is awaited in the <code class="language-plaintext highlighter-rouge">main</code> function with this code: <code class="language-plaintext highlighter-rouge">&lt;-done</code>
Once we receive a signal on the <code class="language-plaintext highlighter-rouge">done</code> channel, the function exits.</p>

<p>Now let’s see if we can go one step further, spin up a single go routine and
send the numbers to this go routine for processing. I will introduce two new
channels: numbers and messages.</p>

<p>The numbers channel will be used to send the numbers to the fizzBuzz function,
while the messages channel will receive the messages from the fizzBuzz function
for printing. Let’s start by looking at the full code:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span> <span class="n">Message</span> <span class="k">struct</span> <span class="p">{</span>
	<span class="n">Value</span> <span class="kt">int</span>
	<span class="n">Text</span>  <span class="kt">string</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">printer</span><span class="p">(</span><span class="n">messages</span> <span class="o">&lt;-</span><span class="k">chan</span> <span class="n">Message</span><span class="p">,</span> <span class="n">done</span> <span class="k">chan</span> <span class="kt">bool</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">for</span> <span class="n">m</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">messages</span> <span class="p">{</span>
		<span class="n">fmt</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"%d %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">m</span><span class="o">.</span><span class="n">Value</span><span class="p">,</span> <span class="n">m</span><span class="o">.</span><span class="n">Text</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="n">done</span> <span class="o">&lt;-</span> <span class="no">true</span>
<span class="p">}</span>
<span class="k">func</span> <span class="n">fizzBuzz</span><span class="p">(</span><span class="n">numbers</span> <span class="o">&lt;-</span><span class="k">chan</span> <span class="kt">int</span><span class="p">,</span> <span class="n">messages</span> <span class="k">chan</span><span class="o">&lt;-</span> <span class="n">Message</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">for</span> <span class="n">n</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">numbers</span> <span class="p">{</span>
		<span class="k">if</span> <span class="n">n</span><span class="o">%</span><span class="m">15</span> <span class="o">==</span> <span class="m">0</span> <span class="p">{</span>
			<span class="n">messages</span> <span class="o">&lt;-</span> <span class="n">Message</span><span class="p">{</span><span class="n">Text</span><span class="o">:</span> <span class="s">"FizzBuzz"</span><span class="p">,</span> <span class="n">Value</span><span class="o">:</span> <span class="n">n</span><span class="p">}</span>
		<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="n">n</span><span class="o">%</span><span class="m">5</span> <span class="o">==</span> <span class="m">0</span> <span class="p">{</span>
			<span class="n">messages</span> <span class="o">&lt;-</span> <span class="n">Message</span><span class="p">{</span><span class="n">Text</span><span class="o">:</span> <span class="s">"Buzz"</span><span class="p">,</span> <span class="n">Value</span><span class="o">:</span> <span class="n">n</span><span class="p">}</span>
		<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="n">n</span><span class="o">%</span><span class="m">3</span> <span class="o">==</span> <span class="m">0</span> <span class="p">{</span>
			<span class="n">messages</span> <span class="o">&lt;-</span> <span class="n">Message</span><span class="p">{</span><span class="n">Text</span><span class="o">:</span> <span class="s">"Fizz"</span><span class="p">,</span> <span class="n">Value</span><span class="o">:</span> <span class="n">n</span><span class="p">}</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="nb">close</span><span class="p">(</span><span class="n">messages</span><span class="p">)</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="k">const</span> <span class="n">max</span> <span class="o">=</span> <span class="m">1000000</span>

	<span class="n">done</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="k">chan</span> <span class="kt">bool</span><span class="p">)</span>
	<span class="n">numbers</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="k">chan</span> <span class="kt">int</span><span class="p">,</span> <span class="n">max</span><span class="p">)</span>
	<span class="n">messages</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="k">chan</span> <span class="n">Message</span><span class="p">)</span>

	<span class="k">go</span> <span class="n">printer</span><span class="p">(</span><span class="n">messages</span><span class="p">,</span> <span class="n">done</span><span class="p">)</span>
	<span class="k">go</span> <span class="n">fizzBuzz</span><span class="p">(</span><span class="n">numbers</span><span class="p">,</span> <span class="n">messages</span><span class="p">)</span>

	<span class="k">for</span> <span class="n">i</span> <span class="o">:=</span> <span class="m">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">max</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">{</span>
		<span class="n">numbers</span> <span class="o">&lt;-</span> <span class="n">i</span>
	<span class="p">}</span>
	<span class="c">// we can close the numbers channel after</span>
	<span class="c">// sending all the numbers</span>
	<span class="nb">close</span><span class="p">(</span><span class="n">numbers</span><span class="p">)</span>

	<span class="o">&lt;-</span><span class="n">done</span>
<span class="p">}</span>
</code></pre></div></div>
<p>When all the numbers are send through the channel, we can close the numbers channel.
This signals the fizzBuzz function that it’s done. Exiting the for loop.
When the all numbers are processed and pushed through the messages channel, the 
messages channel is closed, signaling that the for loop in the printer is finished. 
When that is done, we signal that we are done and the program stops.</p>

<h3 id="waiting-on-multiple-go-routines">Waiting on multiple go routines</h3>

<p>One of my earlier examples had the following code:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="m">100</span> <span class="p">{</span>
    <span class="n">done</span><span class="o">&lt;-</span> <span class="no">true</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This was wrong, if the number 100 was somehow processed before the other, we 
would signal that we were done. The solution is wait groups.</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">fizzBuzz</span><span class="p">(</span><span class="n">i</span> <span class="kt">int</span><span class="p">,</span> <span class="n">wg</span> <span class="o">*</span><span class="n">sync</span><span class="o">.</span><span class="n">WaitGroup</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">defer</span> <span class="n">wg</span><span class="o">.</span><span class="n">Done</span><span class="p">()</span>  <span class="c">// Signal that this goroutine is done once it exits</span>

	<span class="k">if</span> <span class="n">i</span><span class="o">%</span><span class="m">15</span> <span class="o">==</span> <span class="m">0</span> <span class="p">{</span>
		<span class="n">fmt</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"%d FizzBuzz</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span>
	<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="n">i</span><span class="o">%</span><span class="m">5</span> <span class="o">==</span> <span class="m">0</span> <span class="p">{</span>
		<span class="n">fmt</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"%d Buzz</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span>
	<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="n">i</span><span class="o">%</span><span class="m">3</span> <span class="o">==</span> <span class="m">0</span> <span class="p">{</span>
		<span class="n">fmt</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"%d Fizz</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="k">const</span> <span class="n">max</span> <span class="o">=</span> <span class="m">100</span>
	<span class="k">var</span> <span class="n">wg</span> <span class="n">sync</span><span class="o">.</span><span class="n">WaitGroup</span>  <span class="c">// Create a new WaitGroup</span>

	<span class="k">for</span> <span class="n">i</span> <span class="o">:=</span> <span class="m">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">max</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">{</span>
		<span class="n">wg</span><span class="o">.</span><span class="n">Add</span><span class="p">(</span><span class="m">1</span><span class="p">)</span>  <span class="c">// Increment the WaitGroup counter</span>
		<span class="k">go</span> <span class="n">fizzBuzz</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">wg</span><span class="p">)</span>  <span class="c">// Pass a pointer to the WaitGroup</span>
	<span class="p">}</span>

	<span class="n">wg</span><span class="o">.</span><span class="n">Wait</span><span class="p">()</span>  <span class="c">// Block until all goroutines have finished executing</span>
<span class="p">}</span>
</code></pre></div></div>

<blockquote>
  <p>go routines are a lightweight concurrency model. In another article
  I will go deeper into what that means, how to use it in a larger
  system and how to use locks in order to avoid breaking your application.</p>
</blockquote>

<h2 id="appendix">APPENDIX</h2>

<p>This appendix is to add extra information I do not want to keep around in the
actual article because it would bloat the article.</p>

<h3 id="working_with_uuids">Working with UUIDs</h3>
<p>To install the package write:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>go get github.com/google/uuid
</code></pre></div></div>

<p>In your imports add:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"github.com/google/uuid"
</code></pre></div></div>

<h3 id="pointers">Working with pointers</h3>
<p>In computer programming, understanding how data is stored and accessed is fundamental. At the most basic level, every piece of data—be it a number, character, or complex data structure—occupies a location in memory. Sometimes, direct access to this data is sufficient. But in other cases, especially when dealing with large datasets or when optimizing performance, we might not want to manipulate the data directly. Instead, we’d prefer to work with references to that data. These references, often called ‘pointers’ in languages like Go, allow us to interact with data indirectly, providing both flexibility and efficiency. This tutorial will introduce you to the concept of references in Go, explaining how they can be used to enhance your programs.</p>

<p>Take the following code example:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">sayHi</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">var</span> <span class="n">message</span> <span class="kt">string</span>
    <span class="n">message</span> <span class="o">=</span> <span class="s">"Welcome!"</span>
    <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The variable message is no longer used after the function returns. The scope is
bounded by the scope of the function. In this case, the message variable could, potentially,
be put on the stack. A stack is a data structure where we can push things on and
pop things off. It is last in, first out.</p>

<p>Now, if we wanted to store the message for a longer period, for example:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="n">message</span> <span class="kt">string</span>

<span class="k">func</span> <span class="n">sayHi</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">message</span> <span class="o">=</span> <span class="s">"Welcome!"</span>
    <span class="k">for</span> <span class="p">{</span>
        <span class="n">sayHi</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This message would be used fo the duration of the program. In this case, infinitely.
The message variable would possibly be put on the heap. Which is more difficult to access,
harder to clean up, but has a longer life.</p>

<p>The heap also has a funny thing we can do, we can actually reference the location in
memory where something is stored. This is called a pointer. If we wanted to pass a
pointer to the message to the <code class="language-plaintext highlighter-rouge">sayHi</code> function we could write it like this:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="n">message</span> <span class="kt">string</span>

<span class="k">func</span> <span class="n">sayHi</span><span class="p">(</span><span class="n">m</span> <span class="o">*</span><span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="o">*</span><span class="n">m</span><span class="p">)</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">message</span> <span class="o">=</span> <span class="s">"Welcome!"</span>
    <span class="k">for</span> <span class="p">{</span>
        <span class="n">sayHi</span><span class="p">(</span><span class="o">&amp;</span><span class="n">message</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>In go, the <code class="language-plaintext highlighter-rouge">*</code> symbol has two purposes. The firs, when used when declaring a type
is to indicate that it is a pointer to a certain type. When the <code class="language-plaintext highlighter-rouge">*</code> is used as a
prefix to a variable, as in <code class="language-plaintext highlighter-rouge">*m</code>, it dereferences the pointer and gives the value.</p>

<p>The <code class="language-plaintext highlighter-rouge">&amp;</code> symbol gives you the address of a variable, essentially turning the variable
into a pointer.</p>

<blockquote>
  <p>The reason why I say things like <em>potentially</em> and <em>probably</em> is because I am 
  writing a tutorial and I want to explain he concepts. The Go runtime is complicated
  and we can never be sure the variables are actually put on a stack or a heap, or 
  even a data segment, which is different from both. 
  All I am saying is, don’t take the location literally, take the ideas of pointers
  and referencing/dereferencing and read the location where a variable is stored
  as a suggestion.</p>
</blockquote>

<h3 id="concurrency">Concurrency vs Parallelism</h3>
<p>Concurrency and parallelism, while often used interchangeably, capture distinct concepts in computing:</p>

<p>Concurrency: Refers to the ability of a system to <em>deal</em> with multiple tasks at the same time. It’s 
about structuring a program or system to handle multiple tasks, whether they’re executed simultaneously 
or not. This doesn’t necessarily imply that tasks are being executed at the same time.</p>

<p>Parallelism: Refers to the ability of a system to <em>do</em> multiple tasks at the same time. It involves 
executing multiple threads or processes simultaneously, typically on systems with multiple processors 
or cores.</p>

<p>Go is adept at handling both scenarios. It’s vital to understand the difference:</p>

<p>For instance, managing multiple tasks in a non-blocking manner on a single thread, as JavaScript does 
with its event loop, exemplifies concurrency. On the other hand, spinning up multiple threads that 
run simultaneously and coordinate their results back to the main thread illustrates parallelism.</p>
<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p><a href="#working_with_uuids">Working with UUIDs</a> <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p><a href="#pointers">Working with pointers</a> <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a> <a href="#fnref:2:1" class="reversefootnote" role="doc-backlink">&#8617;<sup>2</sup></a></p>
    </li>
    <li id="fn:3" role="doc-endnote">
      <p><a href="#concurrency">Concurrency vs Parallelism</a> <a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Carlos Kelkboom</name></author><category term="Programming" /><category term="Go" /></entry><entry><title type="html">The failures of modern agile frameworks</title><link href="https://baudin999.github.io/blog//blog/2023/08/24/scrum-is-bad.html" rel="alternate" type="text/html" title="The failures of modern agile frameworks" /><published>2023-08-24T00:00:00+02:00</published><updated>2023-08-24T00:00:00+02:00</updated><id>https://baudin999.github.io/blog//blog/2023/08/24/scrum-is-bad</id><content type="html" xml:base="https://baudin999.github.io/blog//blog/2023/08/24/scrum-is-bad.html"><![CDATA[<blockquote>
  <p>I do not pander, I do not soften words and I do not expect everyone to agree with this article.
  I don’t even think everyone will <em>understand</em> this article. With that said, I want to preface
  my writing with a general explanation. I love software and I love quality. This article is more
  a love letter to engineering than a critique on Scrum. If you <em>do</em> want to read this as a critique,
  I will not hold it against you…</p>
</blockquote>

<p>Ah, Scrum! A topic that, for many, begins as an exhilarating breath of fresh air but can often leave a 
bittersweet aftertaste. Reminiscent of how inheritance in object-oriented programming, with its initial 
allure of structure and reusability, often masks complexities and muddles readability, Scrum, too, has 
its own deceptions. As inheritance can compromise code clarity, Scrum runs the risk of 
overshadowing a fundamental truth: at its core, a project’s success is anchored in the competence of its engineers.</p>

<p>let me give you an analogy: <em>Imagine a carpenter. This carpenter is really bad at his work. But, this 
carpenter sees a book on Scrum and he loves it! He makes small iterations, he hires someone to plan 
his work, he even hires someone who helps him face his bad products in a retrospective. All might seem good, 
until you look at the products themselves. His skills have not changed, his products are still bad.</em></p>

<p>I know, after a rant about <a href="https://baudin999.github.io/blog/2023/08/24/inheritance-is-bad.html">inheritance</a>, I 
now have the gall to rant about <a href="https://www.agilealliance.org/glossary/scrum/">Scrum</a>. I promise you
that the only thing I am interested in, is simplicity. I like it when: <em>Good engineers are left to do
what they are good at!</em></p>

<p>For me Scrum is the antithesis of that. Scrum prefers a process over the result and Scrum pretends to 
fit onto and into any software organization*. Transitioning from the early 90s, when Jeff Sutherland and 
Ken Schwaber were influenced by Takeuchi and Nonaka’s analogy of high-performing teams to a game of 
rugby, Scrum emerged as an answer to the limitations of traditional project management. Its structure 
promised agility, adaptability, and results. And for a time, it seemed to deliver just that.</p>

<p>Then commercial success kicked in, especially in the early 2000s. Courses, certifications, and consulting 
services sprouted up. Everyone wanted a piece of the Agile pie, of which Scrum was a major slice. Today? 
It’s a multi-billion-dollar industry. And because of this, just like with most AAA games, greed overtakes
the lofty goals of what agile software development could have been.</p>

<p>This article is about what is wrong with our modern approach to software development, it is a series of observations
on Scrum and it’s larger brother SAFe. It tells the story of why I hate these practices, from the Scrum
boards offered by Atlassian to the need to have a PO and Scrum Master in every team. I will break down
what is needed for a successful business and I will try to setup a simple framework which, in my humble
opinion, is much better than Scrum.</p>

<p><em>* If you feel offended by this remark, I invite you to plow thought the Scrum literature. There is not a
single remark on the impact of a good engineer on the resulting product. It is all about process. If you still 
do not believe me, read the quotes in the next chapter.</em></p>

<h2 id="what-is-scrum">What is Scrum?</h2>

<p>Let’s give a general definition of Scrum. I do not want to invent them myself, so I will give four
definitions from great sources.</p>

<h3 id="wikipedia">Wikipedia</h3>

<p>Scrum is an agile project management system commonly used in software development and other industries.</p>

<p>Scrum prescribes for teams to break work into goals to be completed within time-boxed iterations, called sprints. Each sprint is no longer than one month and commonly lasts two weeks. The scrum team assesses progress in time-boxed, stand-up meetings of up to 15 minutes, called daily scrums. At the end of the sprint, the team holds two further meetings: one sprint review to demonstrate the work for stakeholders and solicit feedback, and one internal sprint retrospective.</p>

<p>Scrum’s approach to product development involves bringing decision-making authority to an operational level. Unlike a sequential approach to product development, scrum is an iterative and incremental framework for product development. Scrum allows for continuous feedback and flexibility, requiring teams to self-organize by encouraging physical co-location or close online collaboration, and mandating frequent communication among all team members. The flexible and semi-unplanned approach of scrum is based in part on the notion of requirements volatility, that stakeholders will change their requirements as the project evolves.</p>

<p>…</p>

<p>A scrum team is organized into at least three categories of individuals: the product owner, developers, and the scrum master. The product owner liaises with stakeholders to communicate tasks and expectations with developers. Developers in a scrum team are intended to be organizing work by themselves, with the facilitation of a scrum master. Scrum teams, ideally, should abide by the five values of scrum: commitment, courage, focus, openness, and respect.</p>

<p><a href="https://en.wikipedia.org/wiki/Scrum_(software_development)">1 wikipedia</a></p>

<h3 id="the-agile-alliance">The agile alliance:</h3>

<p><b>What is Scrum?</b>
Scrum is a process framework used to manage product development and other knowledge work. Scrum is empirical in that it provides a means for teams to establish a hypothesis of how they think something works, try it out, reflect on the experience, and make the appropriate adjustments. That is, when the framework is used properly. Scrum is structured in a way that allows teams to incorporate practices from other frameworks where they make sense for the team’s context.</p>

<p><b>When is Scrum Applicable?</b>
Scrum is best suited in the case where a cross-functional team is working in a product development setting where there is a nontrivial amount of work that lends itself to being split into more than one 2 – 4 week iteration.</p>

<p><a href="https://www.agilealliance.org/glossary/scrum/">2 agile alliance</a></p>

<h3 id="scrumguidesorg">scrumguides.org</h3>

<p>Scrum is a lightweight framework that helps people, teams and organizations generate value through adaptive solutions for complex problems.</p>

<p>In a nutshell, Scrum requires a Scrum Master to foster an environment where:</p>

<ol>
  <li>Product Owner orders the work for a complex problem into a Product Backlog.</li>
  <li>The Scrum Team turns a selection of the work into an Increment of value during a Sprint.</li>
  <li>The Scrum Team and its stakeholders inspect the results and adjust for the next Sprint.</li>
  <li>Repeat</li>
</ol>

<p>Scrum is simple. Try it as is and determine if its philosophy, theory, and structure help to achieve goals and create value. The Scrum framework is purposefully incomplete, only defining the parts required to implement Scrum theory. Scrum is built upon by the collective intelligence of the people using it. Rather than provide people with detailed instructions, the rules of Scrum guide their relationships and interactions.</p>

<p>Various processes, techniques and methods can be employed within the framework. Scrum wraps around existing practices or renders them unnecessary. Scrum makes visible the relative efficacy of current management, environment, and work techniques, so that improvements can be made.</p>

<p><a href="https://scrumguides.org/scrum-guide.html">3 scrumguides.org</a></p>

<h3 id="chat-gpt">Chat GPT</h3>

<p>Scrum is an iterative and incremental Agile framework primarily used for product development. It promotes collaboration, adaptability, and continuous improvement through structured cycles known as “sprints,” typically lasting 2-4 weeks. Central to Scrum are self-organizing teams comprised of a Product Owner, Scrum Master, and Development Team members. Together, they work on a prioritized list called the Product Backlog, delivering potentially shippable increments at the end of each sprint. Through regular ceremonies like Daily Stand-ups, Sprint Planning, Sprint Review, and Sprint Retrospective, Scrum ensures transparency, inspection, and adaptation.</p>

<h2 id="what-rubs-me-the-wrong-way">What rubs me the wrong way?</h2>
<p>There are a few things which tick me off when I read these definitions. I read things like:</p>

<ul>
  <li>Scrum is simple</li>
  <li>Values: commitment, courage, focus, openness, and respect</li>
  <li>Self-organizing teams comprised of a Product Owner, Scrum Master, and Development Team members</li>
  <li>It promotes collaboration, adaptability, and continuous improvement</li>
</ul>

<p>These are just a few lines picked from the definitions. And what do I miss?</p>

<ul>
  <li>Great engineers and engineering</li>
  <li>Trust the people working for/with you</li>
  <li>Simplicity over complexity</li>
</ul>

<p>A great piece of software makes the customer and the developer happy. If I read these scrum articles
they almost have you believe that a process can compensate for everything. But it cannot. A bad dev
will ruin your project and no amount of process can save you. Just like the opposite is true, a good 
dev can be ruined by a process. For me, scrum is the embodiment of this philosophy.</p>

<p>My philosophy is simple, it can be summed up in a single sentence:</p>

<blockquote>
  <p>Hire great engineers you can trust and give them the freedom to make mistakes.</p>
</blockquote>

<h3 id="the-commercialization-of-scrum-and-its-target-audience">The Commercialization of Scrum and Its Target Audience</h3>

<p>Over the past two decades, there’s been an explosion in the commercial offerings around Scrum: 
certifications, training sessions, coaching, tools, and more. This burgeoning industry,
inevitably shapes how Scrum is presented and to whom. MMartin Fowler has even termed this phenomenon 
the: <em>“Agile Industrial Complex”</em> [3]</p>

<p>One can’t help but notice that much of the Scrum narrative, as peddled by the industry, seems 
tailored to suit non-technical stakeholders.[1] The focus on process, ceremonies, roles, and the 
predictability they promise appeals to managers, executives, and other decision-makers who may 
not be deeply entrenched in the nuances of software engineering.</p>

<p>Why this shift in focus? I can only speculate, but I think it is because it’s the business side 
of organizations that often controls the purse strings. 
For a training company or Scrum consultant, it’s far more lucrative to sell 
a course or service to an entire executive team or management layer than to a handful of 
developers. And when you’re selling to this audience, emphasizing easily digestible processes, 
punctuated with amenable images[2], the semblance of control, and the promise of predictable 
outcomes might be more attractive than delving into the intricacies of software quality or 
engineering best practices.</p>

<p>This commercial motive doesn’t necessarily mean that Scrum itself is flawed. But it does suggest 
that the way Scrum is often presented and packaged for consumption might be skewing priorities. 
Instead of emphasizing the critical importance of skilled engineers, technical excellence, and 
product quality, the narrative leans heavily on processes and roles. The result? Organizations 
might find themselves in a sticky situation when they have spent thousands if not millions of
dollars, only to find that the root of their problems were never the process itself.</p>

<p><em>[1] As can be seen from the quotes off of the websites. There is not a single sentence or 
remark towards quality or skill.</em></p>

<p>[2]</p>

<p><img src="/blog/assets/img/Scrum_Agile_events.png" alt="scrum agile events" /></p>

<p>If you are still not convinced, please watch these videos by Dave Thomas and Martin Fowler, co-creators of the Agile Manifesto:</p>

<iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/a-BOSpxYJ9M?si=weBkzv0hSwdyY0Yz" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen=""></iframe>

<p>[3] Or Martin Fowler:</p>

<iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/G_y2pNj0zZg?si=AM8xeorNd5PbXfCM" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen=""></iframe>

<h2 id="can-scrum-work-for-you">Can Scrum work for you?</h2>
<p>The answer is, as always, “it depends”. But it does not depend on anything you might hear advocates
of scrum tell you. It depends on how senior the developers you have in your organization are. If they
know what they are doing and they take the parts of the process which add benefit to their workflow 
and increase their effectiveness through that adoption, the answer is a resounding yes! But that has 
nothing to do with Scrum and everything to do with the quality of the engineering.</p>

<blockquote>
  <p>A process should only make things which are good, better. A process can never be used to make
  something which fails, succeed.</p>
</blockquote>

<p>If you are working in a larger organization and are working with scrum and you find the rituals and
processes comforting, you might think that I am looking at this in a biassed way. I am not. I am 
looking at this from the perspective of the software. In the definitions it is stated that Scrum 
helps an organization focus on the product. If that is so, they must mean Scrum as a product, because
nothing in their definition states how to get to a good software product. They say nothing about the
qualities of the engineers. They say nothing about the scope of a project or the trust the stakeholders
need to let a team “code in peace”. Nothing in their description is conducive to a well coded end-product
which will stand the test of time, can be extended when needed and does not cover more features
than needed.</p>

<h2 id="what-is-the-solution">What is the solution?</h2>
<p>I believe, complexity is the only enemy in a large project. Complexity can be found on any level and
is a literal problem for every person involved. For example:</p>

<ul>
  <li>If you have multiple teams, management is facing complexity</li>
  <li>If you create an over-engineered microservice architecture, your are running against complexity</li>
  <li>If you try to predict when the project will be done, you will face its complexity</li>
</ul>

<p><em>Complexity</em> is the main problem. <em>That</em> is why we need to break problems into smaller chunks. <em>That</em> is why
sprints are sometimes a good idea. Customers do not know what they want before you start working with
the software. They think they do, but they don’t. That is why you show them the product every week, that is 
how they see and feel what they asked for and can change what they had wrong.</p>

<p>When software becomes complex, the delivery slows down. It sometimes grinds to a halt. What do companies do?
They throw manpower against that problem. But what should they do? Reduce the teams to the minimal number 
of people to fix the bottlenecks in the delivery. Do not be afraid to re-write. Do not be afraid the 
make mistakes. Fail, learn, fix. A truly agile company, knows that we do not write code once. We write
it continuously! A company with a mission, a goal, knows that only great engineers working together and
learning from each other while the managers keep the wolves at bay, is the only way to succeed!</p>

<p>The solution to this problem is almost trivial, I will sum it up in a few lines:</p>

<ol>
  <li>Throw away every process handbook you have</li>
  <li>Fire every engineer you do not trust (not skill, trust!)</li>
  <li>Everyone involved with the process writes code</li>
  <li>Every requirement or feature needs to have consensus of the team</li>
  <li>For every new feature, delete a feature</li>
  <li>If something works well, make it better</li>
  <li>If something does not work, remove it</li>
</ol>

<p>These are the rules to live by, these rules will increase your chances of success. You do not need a book,
you just need common sense.</p>

<p>I will try to explain the ideas behind the solution briefly. This is not a guide, these are just some things
you can put into practice which will help you make better software:</p>

<p>Every book written is either theoretical, or an account of experience. While the latter is fun to read, it
does not take into account the extraordinary person who achieved those feats. I advise you to focus on the 
employees who are trustworthy and who can inspire your organization. They will create the software and they
will bring about a better community.</p>

<p>If you do not write code, you do not understand the complexity. I will give a bit of nuance. Everyone 
who is envolved with the project should work with or on the project. This can be, but are not limited to: 
documentation, quality assurance, code or data. A product needs to be good, find people who will make the 
product good, by loving the foundations of your product instead of the titles your organisation hands out.
If you work this way, only features which excite the entire team can go forward. We do not need more 
people mandating or speaking from authority. We need skilled people to be humble and enthusiastic.</p>

<p>We are really bad at cleaning up after ourselves. Especially in an ever evolving code base. We will need
to clean up. And by enforcing that we remove as well as add, we have a better chance to mitigate complexity.</p>

<p>The last two items are about your process. A process should help make something which works well, work better. 
I’ve already said that, but it bears repeating. Please remove every process which does not add benefit, which
hinders developers and which cost money. Focus on making your engineers even more effective!</p>

<h2 id="conclusion">Conclusion</h2>

<p>Scrum, the way it is marketed, the way it is sold, is horrible. Agile software development and Scrum as a methodology of
agile, is not. For the sake of this industry and the generations to come, who will need to work with the
code and the products we create today, let’s not blindly step into a methodology like scrum or SAFe, but
let’s be honest and talk about what really matters. It is not about the process, it’s about the people
making the products.</p>

<p>To finish the analogy I started at the beginning: <em>The carpenter would have been better off, just hiring a 
good carpenter.</em></p>]]></content><author><name>Carlos Kelkboom</name></author><category term="Programming" /><category term="Agile" /><summary type="html"><![CDATA[I do not pander, I do not soften words and I do not expect everyone to agree with this article. I don’t even think everyone will understand this article. With that said, I want to preface my writing with a general explanation. I love software and I love quality. This article is more a love letter to engineering than a critique on Scrum. If you do want to read this as a critique, I will not hold it against you…]]></summary></entry><entry><title type="html">Beyond Coding</title><link href="https://baudin999.github.io/blog//blog/2023/08/24/beyond-coding.html" rel="alternate" type="text/html" title="Beyond Coding" /><published>2023-08-24T00:00:00+02:00</published><updated>2023-08-24T00:00:00+02:00</updated><id>https://baudin999.github.io/blog//blog/2023/08/24/beyond-coding</id><content type="html" xml:base="https://baudin999.github.io/blog//blog/2023/08/24/beyond-coding.html"><![CDATA[<p>Hey everyone, I’ve had the tremendous honor and pleasure to have a conversation with 🎙Patrick Akil of Beyond Coding Podcast.</p>

<p>I think we touched on a few very important topics, please let me know where you think I, or we, were wrong. Let’s keep this conversation alive for the sake of our IT industry.</p>

<iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/6QfyY9ffz6M?si=diDL6H-g_g3ubbrE" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen=""></iframe>

<p><a href="https://www.youtube.com/watch?v=6QfyY9ffz6M">YouTube</a>
<a href="https://www.linkedin.com/posts/carlos-k-4016b8225_innovation-and-disruption-through-software-activity-7099278724696567808-wOij?utm_source=share&amp;utm_medium=member_desktop">linkedin</a></p>]]></content><author><name>Carlos Kelkboom</name></author><category term="Programming" /><category term="Personal" /><category term="Agile" /><summary type="html"><![CDATA[Hey everyone, I’ve had the tremendous honor and pleasure to have a conversation with 🎙Patrick Akil of Beyond Coding Podcast.]]></summary></entry><entry><title type="html">Inheritance is bad</title><link href="https://baudin999.github.io/blog//blog/2023/08/24/inheritance-is-bad.html" rel="alternate" type="text/html" title="Inheritance is bad" /><published>2023-08-24T00:00:00+02:00</published><updated>2023-08-24T00:00:00+02:00</updated><id>https://baudin999.github.io/blog//blog/2023/08/24/inheritance-is-bad</id><content type="html" xml:base="https://baudin999.github.io/blog//blog/2023/08/24/inheritance-is-bad.html"><![CDATA[<p>I hate inheritance! There, I’ve said it. It’s true, I absolutely hate it. Inheritance destroys any
chance you have of understanding your code. And it always starts with such good intentions. You start
by defining a bit of functionality. Now you add another class and you see that same functionality 
happening in two places. Before you actually realise what has happened, you now have a base class
and two concrete classes. Life seems good right?</p>

<p>Unfortunately, it never ends there. Your program always changes, and the base class which seemed to
give you standard functionality is now hindering you. I am not sure if examples are going to help
with illustrating this point, because it is very hard to see an example of evolving code. It’s the 
insidiousness of inheritance, it looks beautiful in an example, but it destroys productivity in 
real life.</p>

<p>Still, let me try:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">class</span> <span class="nc">Message</span> <span class="p">{</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">Url</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="n">Task</span> <span class="nf">Send</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// send the message</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="k">public</span> <span class="k">class</span> <span class="nc">Player</span> <span class="p">:</span> <span class="n">Message</span> <span class="p">{</span>
    <span class="k">private</span> <span class="k">const</span> <span class="kt">string</span> <span class="n">url</span> <span class="p">=</span> <span class="s">"/player"</span><span class="p">;</span>
    <span class="k">public</span> <span class="nf">Player</span><span class="p">()</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">url</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// construct something</span>
    <span class="p">}</span>
<span class="p">}</span> 
<span class="k">public</span> <span class="k">class</span> <span class="nc">LogMessage</span> <span class="p">:</span> <span class="n">Message</span> <span class="p">{</span>
    <span class="k">private</span> <span class="k">const</span> <span class="kt">string</span> <span class="n">url</span> <span class="p">=</span> <span class="s">"/log"</span><span class="p">;</span>
    <span class="k">public</span> <span class="nf">LogMessage</span><span class="p">()</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">url</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// the ctor</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This seems great right? We can now send random classes to the server! That sounds like a great plan!
But it is not, what we have done is, we’ve tightly coupled the <code class="language-plaintext highlighter-rouge">Player</code> class to a <code class="language-plaintext highlighter-rouge">Message</code>. What we 
are trying to do is that we’re trying to add functionality to the classes which it should not have.</p>

<h2 id="purpose-is-everything">Purpose is everything</h2>
<p>The <code class="language-plaintext highlighter-rouge">Player</code> class has a purpose. It’s to give my game some information about the player. For example:
the handle, the last time they played, the last character they selected. This is the goal of the <code class="language-plaintext highlighter-rouge">Player</code>
class.</p>

<p>We will also need to sync that data between server and client. This is what your networking code is for.
It is not that the <code class="language-plaintext highlighter-rouge">Player</code> class cannot and should not be used as a message. It’s that it’s not it’s
responsibility. By giving the <code class="language-plaintext highlighter-rouge">Player</code> class the responsibility of being able to send itself, we tightly
couple functionalities.</p>

<p>So, how can we solve this? We solve this by designing the system differently. Instead of inheritance we
use a concept called <em>composition</em>. A very clean approach to this is a <em>traits</em> system. It’s clean, it’s
super and it’s easy to understand. Here’s a bit of rust showing the power of the trait system:</p>

<p>We define our classes, notice how there is no information about the url in the struct:</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="n">Player</span><span class="p">;</span>
<span class="k">struct</span> <span class="n">LogMessage</span><span class="p">;</span>
</code></pre></div></div>

<p>We define a trait:</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">pub</span> <span class="k">trait</span> <span class="n">SendMessage</span> <span class="p">{</span>
    <span class="k">fn</span> <span class="nf">send</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">String</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Now, let’s define the classes again:</p>
<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">impl</span> <span class="n">SendMessage</span> <span class="k">for</span> <span class="n">Player</span> <span class="p">{</span>
    <span class="k">fn</span> <span class="nf">send</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">String</span> <span class="p">{</span>
        <span class="k">let</span> <span class="n">url</span> <span class="o">=</span> <span class="s">"/player"</span><span class="p">;</span>
        <span class="nd">format!</span><span class="p">(</span><span class="s">"Sending Player to {}"</span><span class="p">,</span> <span class="n">url</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">impl</span> <span class="n">SendMessage</span> <span class="k">for</span> <span class="n">LogMessage</span> <span class="p">{</span>
    <span class="k">fn</span> <span class="nf">send</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">String</span> <span class="p">{</span>
        <span class="k">let</span> <span class="n">url</span> <span class="o">=</span> <span class="s">"/log"</span><span class="p">;</span>
        <span class="nd">format!</span><span class="p">(</span><span class="s">"Sending LogMessage to {}"</span><span class="p">,</span> <span class="n">url</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>You can even define these traits in a separate module to keep things tight and clean.
We have moved the url to the implementation of the trait, could this be even cleaner?
Of course, but this code serves the purpose of telling the story, everything related
to sending a <code class="language-plaintext highlighter-rouge">struct</code> to the server is contained in the implementation of the trait 
and is not scattered into my business object.</p>

<p>I would use this something like:</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">let</span> <span class="n">player_msg</span> <span class="o">=</span> <span class="n">Player</span><span class="p">;</span>
    <span class="k">let</span> <span class="n">log_msg</span> <span class="o">=</span> <span class="n">LogMessage</span><span class="p">;</span>

    <span class="nf">print_message</span><span class="p">(</span><span class="o">&amp;</span><span class="n">player_msg</span><span class="p">);</span>
    <span class="nf">print_message</span><span class="p">(</span><span class="o">&amp;</span><span class="n">log_msg</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">fn</span> <span class="n">print_message</span><span class="o">&lt;</span><span class="n">T</span><span class="p">:</span> <span class="n">SendMessage</span><span class="o">&gt;</span><span class="p">(</span><span class="n">message</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
    <span class="nd">println!</span><span class="p">(</span><span class="s">"{}"</span><span class="p">,</span> <span class="n">message</span><span class="nf">.send</span><span class="p">());</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Why would I do this? What does it matter? What is the harm in sprinkling some extra
functionality onto a object? The crux of the problem is that when you sprinkle extra 
functionality onto an object through inheritance, you’re not just adding code. You’re 
adding complexity. You’re altering the design contract of that object. Let’s dig a bit 
deeper.</p>

<h3 id="the-myth-of-the-all-powerful-object">The Myth of the All-Powerful Object</h3>

<p>The thought process behind inheritance often stems from the idea of creating this 
“super object” that can do multiple things. It’s tempting, right? Create a class 
that’s not just an entity but can also manage its own persistence, validation, 
transformation, and so forth. The problem is, this leads to objects that have multiple 
responsibilities and violate the 
<a href="https://en.wikipedia.org/wiki/Single-responsibility_principle">Single Responsibility Principle (SRP)</a>.</p>

<p>For me, this SRP is the single most important guideline against complexity. A large
system is very complex, if your objects have a lot of responsibilities it will be
extremely difficult to change the system. If your object do only one thing, this will
become a lot easier.</p>

<p>Before we go into the details of how inheritance make changing code extremely difficult, 
let’s go over a few of the pitfalls of these <em>God Objects</em>.</p>

<h4 id="tight-coupling">Tight coupling</h4>
<p>Objects that inherit functionalities are more tightly coupled. This means, when a base 
class changes, all the derived classes can potentially break. This makes the code less 
flexible and harder to maintain. Now, imagine you have a chain of inheritance, and one 
change in the foundational class cascades across dozens of classes derived from it. 
It’s a maintenance nightmare.</p>

<p>I always have the guideline that a change should only affect the minimal number of files 
and classes. With inheritance, when you touch a base class, you need to recompile every
class inheriting from that base class. This breaks my guideline.</p>

<h4 id="information-hiding">Information hiding</h4>
<p>Inheritance often hides dependencies and through that, information. When you inherit from 
a base class, you might inadvertently inherit behaviors that aren’t immediately visible. 
These hidden behaviors can introduce bugs that are hard to trace because they don’t 
originate from the derived class’s code but from somewhere up the inheritance chain.</p>

<p>It also, literally, hides information. The number of times I have stared at a piece of 
code, amazed at the bug and wondering where it came from, only to discover that the 
actual code which is wreaking havoc on my product is hidden deeply in a inheritance
tree; are too many to count. I like to see what something does. I want everything in 
a single file. I want to set a break-point or <code class="language-plaintext highlighter-rouge">printf</code> some debug info and know what is
happening where.</p>

<p>Look at this example:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>

</code></pre></div></div>

<h4 id="the-illusion-of-reusability">The illusion of Reusability</h4>
<p>One of the main reasons developers opt for inheritance is reusability. While inheritance 
can provide reusability, it often comes at the cost of flexibility. As shown in the example, 
it’s much cleaner to use composition where each class or trait does one thing and does it
well. It is easier to reuse a small, well-defined component than a large, monolithic one.</p>

<p>Reuse comes in multiple forms, reuse of data and reuse of functionality. When you reuse data
you are reusing information either to display it differently, or to act upon differently.
This is not bad, it is easy to refactor and easy to maintain. Reuse of functionality leads
to all manner of type information being spread throughout the code. Generics, Generic type
guards and interfaces all pop up because we want to reuse. All of these features make 
refactoring your code a lot harder than it needs to be.</p>

<h4 id="example-of-frailty">Example of frailty</h4>

<p>Suppose there’s a new requirement: Players can now have premium and non-premium statuses. 
Premium players’ messages must be sent to a different URL and also need an extra header 
for authentication.</p>

<p>We would write something like:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">class</span> <span class="nc">PremiumPlayer</span> <span class="p">:</span> <span class="n">Player</span> <span class="p">{</span>
    <span class="k">private</span> <span class="k">const</span> <span class="kt">string</span> <span class="n">premiumUrl</span> <span class="p">=</span> <span class="s">"/premium-player"</span><span class="p">;</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">AuthenticationHeader</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>

    <span class="k">public</span> <span class="nf">PremiumPlayer</span><span class="p">(</span><span class="kt">string</span> <span class="n">authHeader</span><span class="p">)</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">premiumUrl</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="n">AuthenticationHeader</span> <span class="p">=</span> <span class="n">authHeader</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// Overriding Send method to include the new header</span>
    <span class="k">public</span> <span class="k">override</span> <span class="n">Task</span> <span class="nf">Send</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// include the AuthenticationHeader</span>
        <span class="c1">// send the message</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>By overriding the Send method, we now bypass the original implementation and have forced
the code to behave differently. We can still use the <code class="language-plaintext highlighter-rouge">PremiumPlayer</code> as if it is a <code class="language-plaintext highlighter-rouge">Player</code>
because of polymorphism. But we can no longer clearly see what is happening. If we want
to change the <code class="language-plaintext highlighter-rouge">Send</code> behavior to always have a header called <code class="language-plaintext highlighter-rouge">x-github-id</code>, we need to 
make this change in two places. Increasing the chance at bugs.</p>

<p>Again, it is hard to find a good <em>static</em> example of this, but if you’ve ever maintained 
a code-base with multiple layers of inheritance you should feel your palms start to sweat
a little by now.</p>

<h2 id="solution">Solution</h2>

<p>How should we solve this problem? We still need to send data to the server, how should 
we do that? There are two ways to approach this problem. I will only describe <em>composition</em>,
but there is a second way, you can make an object per purpose and map between them.</p>

<p>Let’s look at composition. CSharp does not have a trait system, which sucks. It literally
is one of the best ways to do composition, but alas. Let’s look at interfaces first and afterwards 
I will also give an example of moving your functionality to a class which takes a message 
as a parameter.</p>

<h3 id="interfaces">Interfaces</h3>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System.Threading.Tasks</span><span class="p">;</span>

<span class="k">public</span> <span class="k">interface</span> <span class="nc">IMessageSender</span> <span class="p">{</span>
    <span class="n">Task</span> <span class="nf">Send</span><span class="p">(</span><span class="kt">string</span> <span class="n">url</span><span class="p">,</span> <span class="kt">string</span> <span class="n">payload</span><span class="p">,</span> <span class="kt">string</span><span class="p">?</span> <span class="n">header</span> <span class="p">=</span> <span class="k">null</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">interface</span> <span class="nc">IMessage</span> <span class="p">{</span>
    <span class="n">Task</span> <span class="nf">SendMessage</span><span class="p">();</span>
    <span class="kt">string</span> <span class="nf">Serialize</span><span class="p">();</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">Player</span> <span class="p">:</span> <span class="n">IMessage</span> <span class="p">{</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">Url</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span> <span class="p">=</span> <span class="s">"/player"</span><span class="p">;</span>
    <span class="k">protected</span> <span class="k">readonly</span> <span class="n">IMessageSender</span> <span class="n">_sender</span><span class="p">;</span>

    <span class="k">public</span> <span class="nf">Player</span><span class="p">(</span><span class="n">IMessageSender</span> <span class="n">sender</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">_sender</span> <span class="p">=</span> <span class="n">sender</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">virtual</span> <span class="n">Task</span> <span class="nf">SendMessage</span><span class="p">()</span> <span class="p">{</span>
        <span class="kt">string</span> <span class="n">payload</span> <span class="p">=</span> <span class="nf">Serialize</span><span class="p">();</span>
        <span class="k">return</span> <span class="n">_sender</span><span class="p">.</span><span class="nf">Send</span><span class="p">(</span><span class="n">Url</span><span class="p">,</span> <span class="n">payload</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">virtual</span> <span class="kt">string</span> <span class="nf">Serialize</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// Implementation for Player class.</span>
        <span class="c1">// For now, return a placeholder string.</span>
        <span class="k">return</span> <span class="s">"Serialized Player Data"</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">PremiumPlayer</span> <span class="p">:</span> <span class="n">IMessage</span> <span class="p">{</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">Url</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span> <span class="p">=</span> <span class="s">"/premium-player"</span><span class="p">;</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">AuthenticationHeader</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="n">IMessageSender</span> <span class="n">_sender</span><span class="p">;</span>

    <span class="k">public</span> <span class="nf">PremiumPlayer</span><span class="p">(</span><span class="n">IMessageSender</span> <span class="n">sender</span><span class="p">,</span> <span class="kt">string</span> <span class="n">authHeader</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">_sender</span> <span class="p">=</span> <span class="n">sender</span><span class="p">;</span>
        <span class="n">AuthenticationHeader</span> <span class="p">=</span> <span class="n">authHeader</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="n">Task</span> <span class="nf">SendMessage</span><span class="p">()</span> <span class="p">{</span>
        <span class="kt">string</span> <span class="n">payload</span> <span class="p">=</span> <span class="nf">Serialize</span><span class="p">();</span>
        <span class="k">return</span> <span class="n">_sender</span><span class="p">.</span><span class="nf">Send</span><span class="p">(</span><span class="n">Url</span><span class="p">,</span> <span class="n">payload</span><span class="p">,</span> <span class="n">AuthenticationHeader</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="kt">string</span> <span class="nf">Serialize</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// Implementation for PremiumPlayer class.</span>
        <span class="c1">// For now, return a placeholder string.</span>
        <span class="k">return</span> <span class="s">"Serialized PremiumPlayer Data"</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>We are passing the <code class="language-plaintext highlighter-rouge">IMessageSender</code> to the <code class="language-plaintext highlighter-rouge">IMessage</code> class and with that service we are injecting
we can send the message. This is a more natural way of writing the code. I still do not like it
that the <code class="language-plaintext highlighter-rouge">Player</code> and <code class="language-plaintext highlighter-rouge">PremiumPlayer</code> classes have these methods which are strictly for sending them, 
like the <code class="language-plaintext highlighter-rouge">SendMessage</code> method and the <code class="language-plaintext highlighter-rouge">Serialize</code> method, but at least they belong to the <code class="language-plaintext highlighter-rouge">IMessage</code>
interface and not longer to the class itself.</p>

<h3 id="layers-or-services">Layers or Services</h3>
<p>Another way to structure this is by making the <code class="language-plaintext highlighter-rouge">MessageSender.Send</code> a function we can call with
the correct parameters. We can even make separate methods, making sure we handle the messages
correctly, no matter what the message is.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">interface</span> <span class="nc">ISerializable</span> <span class="p">{</span>
    <span class="kt">string</span> <span class="nf">Serialize</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Our data classes:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">class</span> <span class="nc">Player</span> <span class="p">:</span> <span class="n">ISerializable</span> <span class="p">{</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">int</span> <span class="n">Score</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

    <span class="k">public</span> <span class="kt">string</span> <span class="nf">Serialize</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// Convert the player data to a string (e.g., JSON)</span>
        <span class="k">return</span> <span class="n">System</span><span class="p">.</span><span class="n">Text</span><span class="p">.</span><span class="n">Json</span><span class="p">.</span><span class="n">JsonSerializer</span><span class="p">.</span><span class="nf">Serialize</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">PremiumPlayer</span> <span class="p">:</span> <span class="n">ISerializable</span> <span class="p">{</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">int</span> <span class="n">Score</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">AuthenticationHeader</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

    <span class="k">public</span> <span class="kt">string</span> <span class="nf">Serialize</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// Convert the premium player data to a string (e.g., JSON)</span>
        <span class="k">return</span> <span class="n">System</span><span class="p">.</span><span class="n">Text</span><span class="p">.</span><span class="n">Json</span><span class="p">.</span><span class="n">JsonSerializer</span><span class="p">.</span><span class="nf">Serialize</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">MessageSender</code>:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">class</span> <span class="nc">MessageSender</span> <span class="p">{</span>
    <span class="k">public</span> <span class="n">Task</span> <span class="nf">Send</span><span class="p">(</span><span class="kt">string</span> <span class="n">url</span><span class="p">,</span> <span class="n">ISerializable</span> <span class="n">payload</span><span class="p">,</span> <span class="kt">string</span><span class="p">?</span> <span class="n">header</span> <span class="p">=</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">var</span> <span class="n">serializedData</span> <span class="p">=</span> <span class="n">payload</span><span class="p">.</span><span class="nf">Serialize</span><span class="p">();</span>
        <span class="c1">// do your thing</span>
        <span class="k">return</span> <span class="n">Task</span><span class="p">.</span><span class="n">CompletedTask</span><span class="p">;</span> 
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Now we add a proxy layer, something we go through just for the sake of sending the message:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">class</span> <span class="nc">PlayerService</span> <span class="p">{</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="n">MessageSender</span> <span class="n">_messageSender</span><span class="p">;</span>

    <span class="k">public</span> <span class="nf">PlayerService</span><span class="p">(</span><span class="n">MessageSender</span> <span class="n">messageSender</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">_messageSender</span> <span class="p">=</span> <span class="n">messageSender</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="n">Task</span> <span class="nf">SendPlayer</span><span class="p">(</span><span class="n">Player</span> <span class="n">player</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">string</span> <span class="n">url</span> <span class="p">=</span> <span class="s">"/player"</span><span class="p">;</span>
        <span class="k">return</span> <span class="n">_messageSender</span><span class="p">.</span><span class="nf">Send</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">player</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="n">Task</span> <span class="nf">SendPremiumPlayer</span><span class="p">(</span><span class="n">PremiumPlayer</span> <span class="n">premiumPlayer</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">string</span> <span class="n">url</span> <span class="p">=</span> <span class="s">"/premium-player"</span><span class="p">;</span>
        <span class="kt">string</span> <span class="n">authenticationHeader</span> <span class="p">=</span> <span class="s">"yo-I-am-he!"</span><span class="p">;</span>
        <span class="k">return</span> <span class="n">_messageSender</span><span class="p">.</span><span class="nf">Send</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">premiumPlayer</span><span class="p">,</span> <span class="n">authenticationHeader</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This comes a lot closer to a nice separation of concerns. One other thing to notice is that 
I do not have to use interfaces. I just pass in the actual classes. The code is so simple that
I even have a hard time advocating for a lot of tests. I would however run large integration
and black box tests in a system like this.</p>

<h2 id="should-you-really-never-use-inheritance">Should you really never use inheritance?</h2>

<p>Inheritance is a contentious subject for many reasons, but there is one application of inheritance 
that I do wholeheartedly endorse: the inheritance of pure data classes. Let me elaborate.</p>

<p>Consider a scenario where many entities in your system need a unique identifier, a creation 
timestamp, or some other common set of properties. In these cases, it makes sense to have a base 
class like an Entity that represents the common attributes shared by multiple domain objects.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">abstract</span> <span class="k">class</span> <span class="nc">Entity</span> <span class="p">{</span>
    <span class="k">public</span> <span class="n">Guid</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="n">DateTime</span> <span class="n">CreatedAt</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

    <span class="k">public</span> <span class="nf">Entity</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">Id</span> <span class="p">=</span> <span class="n">Guid</span><span class="p">.</span><span class="nf">NewGuid</span><span class="p">();</span>
        <span class="n">CreatedAt</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">UtcNow</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>In this example, our Entity class has two properties: an identifier (<code class="language-plaintext highlighter-rouge">Id</code>) and a timestamp indicating 
when the entity was created (<code class="language-plaintext highlighter-rouge">CreatedAt</code>). Let’s take a look at our earlier <code class="language-plaintext highlighter-rouge">Player</code> class and see how 
it could inherit from this <code class="language-plaintext highlighter-rouge">Entity</code> class.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">class</span> <span class="nc">Player</span> <span class="p">:</span> <span class="n">Entity</span> <span class="p">{</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">int</span> <span class="n">Score</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This now means that every <code class="language-plaintext highlighter-rouge">Player</code> object will automatically have an <code class="language-plaintext highlighter-rouge">Id</code> and <code class="language-plaintext highlighter-rouge">CreatedAt</code> property without 
us having to define it explicitly in the <code class="language-plaintext highlighter-rouge">Player</code> class. And it’s not just <code class="language-plaintext highlighter-rouge">Player</code> - any other class in 
our system that needs these properties can simply inherit from Entity.</p>

<h1 id="conclusion">Conclusion</h1>

<p>While inheritance <em>is</em> inherently evil. Like all tools in the programmer’s toolkit, it has its time and place.
The key is understanding when and how to use it effectively. For behavior-based functionality, composition, 
interfaces, and other patterns usually offer a more flexible and maintainable approach. But for pure data 
classes where there’s a clear, shared set of attributes across multiple objects, inheritance can be a 
practical solution. Just be sure always to use it judiciously and remain mindful of its potential pitfalls.</p>]]></content><author><name>Carlos Kelkboom</name></author><category term="Programming" /><category term="OOP" /><summary type="html"><![CDATA[I hate inheritance! There, I’ve said it. It’s true, I absolutely hate it. Inheritance destroys any chance you have of understanding your code. And it always starts with such good intentions. You start by defining a bit of functionality. Now you add another class and you see that same functionality happening in two places. Before you actually realise what has happened, you now have a base class and two concrete classes. Life seems good right?]]></summary></entry><entry><title type="html">Hello, World</title><link href="https://baudin999.github.io/blog//blog/2023/08/23/hello-world.html" rel="alternate" type="text/html" title="Hello, World" /><published>2023-08-23T00:00:00+02:00</published><updated>2023-08-23T00:00:00+02:00</updated><id>https://baudin999.github.io/blog//blog/2023/08/23/hello-world</id><content type="html" xml:base="https://baudin999.github.io/blog//blog/2023/08/23/hello-world.html"><![CDATA[<p>Writing and blogging have always been incredibly important. Most of the things I’ve learned have been through a medium like this. Of course, I have learned a lot from watching YouTube videos or conversing with colleagues, but the written medium stands out like no other. After two decades in this business, I am ready to contribute to the conversation.</p>

<p>My field, the field of software development, feels disrupted. It feels like it is no longer the discipline it once was. There are too many people who have traded skills for salary. Just look at the number of people calling themselves “React Devs”. With these writings, I want to express myself, and if, for some reason, people find it helpful, I would enjoy that a lot.</p>

<p>As a first topic, I want to write about writing. To write something, is to put something on paper which translates your inner thoughts into distinct words which trigger a sensation or a memory in the minds of the reader. Writing is not something I take lightly. It is very difficult to get my message across in such a way that the reader actually understands what I am writing. But I have learned some tricks which I would like to share with you.</p>

<h2 id="first-rule-of-writing">First rule of writing</h2>
<p>You should never write something in a vacuum. You will need people to review and revise your work. You will need people you trust around you challenging your assumptions and your writing style. You might feel like you have articulated your point well, but that is not up to you! That is up to the reader. So the first rule of writing is:</p>

<blockquote>
  <p>Ask for help</p>
</blockquote>

<h2 id="second-rule-of-writing">Second rule of writing</h2>
<p>To write something is to preserve a moment in time. A moment when your brain fired neurons in that particular order. A moment when
you saw the light bounce off a metallic object in such a way, that it inspired you to put ink to paper. This moment in time: this 
amalgamation of luck and skill resulted in words. These words contain your views, your opinions, your perception of the world in that
moment.</p>

<p>Do not be afraid of that moment, but realise that what you are writing is going to age. And most likely, it will not age well. Embrace
that, but do everything you can to realise that you are not writing for yourself, but you are writing for future readers. Keep your 
words readable, keep hidden knowledge to a minimum and keep you language short and well-spoken. The second rule of writing is:</p>

<blockquote>
  <p>Write for the future, not for the present</p>
</blockquote>

<h2 id="third-rule-of-writing">Third rule of writing</h2>
<p>Do not think that there is only one way or one medium. When you write, you take detours; when you watch, you want quick successions of
setup and resolution. Think about how things translate from one medium to the next; for example, this blog post might end up as a 
YouTube video. But I cannot “just read” this out loud. I will have to rewrite.</p>

<p>The third rule of writing:</p>

<blockquote>
  <p>Every word, every sentence has a purpose</p>
</blockquote>

<h1 id="conclusion">Conclusion</h1>
<p>I hope you’ve enjoyed this first post. I also hope you’ve noticed that these rules are not only for writing prose, but are also 
extremely important when writing code. I will leave the explanation of this to the reader. But we would all do well if we remember
these rules.</p>]]></content><author><name>Carlos Kelkboom</name></author><category term="Programming" /><category term="Writing" /><category term="Personal" /><summary type="html"><![CDATA[Writing and blogging have always been incredibly important. Most of the things I’ve learned have been through a medium like this. Of course, I have learned a lot from watching YouTube videos or conversing with colleagues, but the written medium stands out like no other. After two decades in this business, I am ready to contribute to the conversation.]]></summary></entry></feed>